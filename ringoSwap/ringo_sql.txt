--회원관련
--회원정보 테이블
CREATE TABLE ringo_member (
	user_num 				number			primary key,				--회원 고유 번호, 기본키, 마이피드 및 마이페이지 게시글의 게시글번호로도 활용합니다
	user_id					varchar2(30)		NOT NULL unique,	--회원 id
	password				varchar2(255)	NOT NULL,			--비밀번호
	nickname				varchar2(30)		NOT NULL,			--회원 닉네임
	first_name				varchar2(20)		NOT NULL,			--회원 이름
	last_name				varchar2(15)		NOT NULL,			--회원 성
	gender					char(1)			NOT NULL check(gender in('F', 'M', 'N')),	--성별
	birth_date				date					NOT NULL,			--생년월일
	email	 					varchar2(60)	NOT NULL unique,	--이메일(인증용)
	native_lang			varchar2(8)		NOT NULL,			--모국어 설정
	target_lang			varchar2(8)		NOT NULL,			--학습언어 설정
	--취미 및 기타 선택입력 정보
	original_profile		varchar2(100)	default '기본사진1.jpg',		--프로필 사진 실제 파일 이름
	saved_profile			varchar2(100)	default '20230908.jpg',		--프로필 사진 저장경로에서의 이름
	original_background	varchar2(100) default '기본사진2.jpg',		--사용자 배경사진 실제 파일이름
	saved_background	varchar2(100) default '20230909.jpg',		--사용자 배경사진 저장경로에서의 이름
	introduction			varchar2(1500)	default '자기소개를 적어주세요',								--자기소개
	--mbti 성격 지정, 16개+지정안했을때 전용인 NONE의 17가지로 선택지를 한정함
	--해당 계정의 유료, 무료재화 보유량에 관한 정보
	point						number				default 0,				--포인트, 무료재화
	cash						number				default 0,				--캐쉬, 유료재화
	--계정 권한에 관한 정보
	rewrite_time			date					default sysdate,		--수정일자
	role_name				varchar2(15)		default 'ROLE_USER' check(role_name in ('ROLE_USER', 'ROLE_DELETE', 'ROLE_VIP', 'ROLE_ADMIN')),
	--일반사용자 = role_user, VIP사용자 = role_vip, 관리자=role_admin, '탈퇴한 유저는 delete_user로 변경
	enabled					number(1)			default 1 check(enabled in(0, 1)),	--계정 사용가능 여부, 가능=1, 불가=0
	--정보공개 여부에 관한 정보
	follow_open			char(1)				default 'Y',				--팔로워수 공개여부
	trans_lang				varchar2(8)		default 'ko' check(trans_lang in ('ko', 'ja', 'en'))			--기본 번역언어 설정
);
--member전용 시퀸스
create SEQUENCE ringo_member_seq;

--마이탭에 표시하기 위해 기존 회원정보에 더해 프로필사진정보+팔로워/팔로잉 갯수+태그 정보를 같이 출력하는 view create문
CREATE VIEW ringo_member_with_mypage AS
	select M.user_num, M.user_id, M.nickname
		, M.native_lang, M.target_lang, M.trans_lang
		, M.introduction, M.original_profile, M.saved_profile
		, M.original_background, M.saved_background
        , M.follow_open
		, COALESCE(FW.fw_cnt, 0) as fe_count				--팔로워 수를 기록하는 속성
		, COALESCE(FE.fe_cnt, 0) as fr_count				--팔로우 수를 기록하는 속성
	from ringo_member M
    LEFT JOIN (
        SELECT follower_num, COUNT(*) AS fw_cnt
        FROM ringo_member_follow
        GROUP BY follower_num
    ) FW ON M.user_num = FW.follower_num
    LEFT JOIN (
        SELECT followee_num, COUNT(*) AS fe_cnt
        FROM ringo_member_follow
        GROUP BY followee_num
    ) FE ON M.user_num = FE.followee_num;

--각 회원과 해당 회원이 갖는 태그를 매칭하는 테이블
CREATE TABLE ringo_taglink_member (
	user_num				number,			--멤버 테이블 외래키, tag_num과 복합하여 복합 기본키 구성
	tag_num				number,			--태그저장소 테이블 외래키, user_num과 복합하여 복합 기본키 구성
	primary key(user_num, tag_num),
	constraint fk_tag_num_tlm	    foreign key	(tag_num) references ringo_tagstorage_member(tag_num) on delete cascade,
	constraint fk_user_num_tlm	foreign key	(user_num) references ringo_member(user_num) on delete cascade
);
--회원에 기록할 취미 태그를 직접 기록하는 테이블
CREATE TABLE ringo_tagstorage_member (
	tag_num		number				primary key,		--태그 번호
	tag			varchar2(60)	not null					--실제 태그 이름
);
--회원태그 목록. 아래 insert문을 사용하여 DB에 미리 입력할 것.
INSERT ALL
   INTO ringo_tagstorage_member VALUES (1, 'MBTI')
   INTO ringo_tagstorage_member VALUES (2, '인스타그램')
   INTO ringo_tagstorage_member VALUES (3, '만화')
   INTO ringo_tagstorage_member VALUES (4, 'E-스포츠')
   INTO ringo_tagstorage_member VALUES (5, '캠핑')
   INTO ringo_tagstorage_member VALUES (6, '온천')
   INTO ringo_tagstorage_member VALUES (7, '쇼핑')
   INTO ringo_tagstorage_member VALUES (8, '스시')
   INTO ringo_tagstorage_member VALUES (9, '여행')
   INTO ringo_tagstorage_member VALUES (10, '미드')
   INTO ringo_tagstorage_member VALUES (11, '전시회')
   INTO ringo_tagstorage_member VALUES (12, 'PC방')
   INTO ringo_tagstorage_member VALUES (13, '축구')
   INTO ringo_tagstorage_member VALUES (14, '야구')
   INTO ringo_tagstorage_member VALUES (15, '게임')
   INTO ringo_tagstorage_member VALUES (16, '애니메이션')
   INTO ringo_tagstorage_member VALUES (17, '운동')
   INTO ringo_tagstorage_member VALUES (18, '수영')
   INTO ringo_tagstorage_member VALUES (19, '베이킹')
   INTO ringo_tagstorage_member VALUES (20, '커뮤니티')
   INTO ringo_tagstorage_member VALUES (21, '패션')
   INTO ringo_tagstorage_member VALUES (22, 'BTS')
   INTO ringo_tagstorage_member VALUES (23, '클라이밍')
   INTO ringo_tagstorage_member VALUES (25, '음악')
   INTO ringo_tagstorage_member VALUES (26, '주식')
   INTO ringo_tagstorage_member VALUES (27, '카페')
   INTO ringo_tagstorage_member VALUES (28, '주류')
   INTO ringo_tagstorage_member VALUES (29, '블로그')
   INTO ringo_tagstorage_member VALUES (30, '유투브')
   INTO ringo_tagstorage_member VALUES (31, '동물')
   INTO ringo_tagstorage_member VALUES (32, '식물')
   INTO ringo_tagstorage_member VALUES (33, '언어교환')
   INTO ringo_tagstorage_member VALUES (34, '문화')
   INTO ringo_tagstorage_member VALUES (35, '과학')
   INTO ringo_tagstorage_member VALUES (36, '역사')
   INTO ringo_tagstorage_member VALUES (37, '유학')
   INTO ringo_tagstorage_member VALUES (38, '취직')
   INTO ringo_tagstorage_member VALUES (39, '음식')
   INTO ringo_tagstorage_member VALUES (40, '코미디')
   INTO ringo_tagstorage_member VALUES (41, '워킹홀리데이')
SELECT * FROM DUAL;
insert into ringo_tagstorage_member
values  ([tag_num], [tag]);


CREATE TABLE ringo_member_follow(
	follower_num			number,
	followee_num		number,
	friend_check			number(1)		default 0 check(friend_check in(0, 1)),		--친구인지 여부: 0=친구아님 1=친구임
	primary key(follower_num, followee_num),
	constraint fk_follower_num		foreign key (follower_num) references ringo_member(user_num) on delete cascade,
	constraint fk_followee_num		foreign key (follower_num) references ringo_member(user_num) on delete cascade
);
--
CREATE VIEW ringo_follower_view AS
	select F.follower_num, F.followee_num
        , F.friend_check
		, M.nickname as follower_name
		, M.original_profile, M.saved_profile
	from ringo_member_follow F
	left join
		ringo_member M ON F.follower_num = M.user_num;
--
CREATE VIEW ringo_followee_view AS
	select F.follower_num, F.followee_num
        , F.friend_check
		, M.nickname as followee_name
		, M.original_profile, M.saved_profile
	from ringo_member_follow F
	left join
		ringo_member M ON F.followee_num = M.user_num;


--피드 관련
--피드 테이블
CREATE TABLE ringo_feed (
	feed_num			number				primary key,			--피드 글번호
	user_num			number				references ringo_member(user_num) on delete cascade,	--유저 키, 피드 작성자
	contents			varchar2(3000)	NOT NULL,			--내용
	inputdate			date					default sysdate,		--작성일
	enabled				number(1)			default 1 check(enabled in	(0, 1))		--해당 피드가 삭제대기를 위해 내려갔는지 여부/ 0=피드 내려감, 1=피드 안 내려감
);
create SEQUENCE ringo_feed_seq;
--피드 정보+user_id+좋아요 수+태그를 속성으로 갖는 view를 create하는 명령어
CREATE VIEW ringo_feed_with_likeandtag AS
SELECT F.feed_num, F.user_num
	, M.user_id, M.nickname
	, M.original_profile, M.saved_profile	
	, F.contents, F.inputdate
	, count(L.user_num) AS like_count
	, listagg(T.tag_name, ' ') within group (order by TF.link_num) AS tag_list
from
    ringo_feed F
left join
	ringo_member M ON F.user_num = M.user_num
left join
    ringo_feed_like L ON F.feed_num = L.feed_num
left join
    ringo_taglink_feed TF ON F.feed_num = TF.feed_num
left join
    ringo_tagstorage T ON TF.tag_num = T.tag_num
GROUP BY
    F.feed_num, F.user_num, M.user_id, M.nickname, M.original_profile, M.saved_profile, F.contents, F.inputdate;
--view 사용 예시(14일 이내 작성한 글을 좋아요 수가 많은 순으로 정렬해 출력),
select * from ringo_feed_with_likeandtag
where (sysdate - inputdate) <= 14
order by like_count DESC;

--피드에 사진을 넣는 테이블, 한 피드에 여러개의 사진을 넣을 수 있다.
CREATE TABLE ringo_feed_photo (
	photo_num		number				primary key,			--피드 사진 번호
	feed_num			number,										--사진이 입력된 글번호를 불러오는 외래키
	origin_file			varchar2(100)	not null,					--실제 파일명
	saved_file			varchar2(100)	not null,					--저장된 경로에서의 파일명
	inputdate			date					default sysdate,		--사진 업로드 날짜 및 시간
	description		varchar2(150),								--사진에 대한 설명이나 캡션
	photo_size		number,										--사진 파일의 크기 (바이트 단위)
	photo_format		varchar2(20)		not null,					--사진의 확장자나 형식 (예: JPEG, PNG, GIF 등)
	resolution			varchar2(12),								--사진의 해상도 (예: 1920x1080)
	constraint	fk_feed_num_ph	foreign key (feed_num) references ringo_feed(feed_num) on delete cascade
);
create SEQUENCE ringo_feed_photo_seq;

--피드에 달린 좋아요를 기록하는 테이블. 동일 피드에 동일 회원이 중복해서 좋아요 누르는건 불가능
CREATE TABLE ringo_feed_like (
	feed_num			number, 						--외래키, user와 합쳐서 복합 기본키로 사용
	user_num			number,						--외래키, feed와 합쳐서 복합 기본키로 사용
    inputdate           date        default sysdate,    --좋아요 추가시간, 알림에 사용
	primary key	(feed_num, user_num),		--두 외래키를 복합 기본키로 설정
	constraint fk_feed_num_flike	foreign key (feed_num)	references ringo_feed(feed_num) on delete cascade,
	constraint fk_user_num_flike	foreign key (user_num)	references ringo_member(user_num) on delete cascade
);

--피드에 달린 댓글을 기록하는 테이블.
CREATE TABLE ringo_reply (
	reply_num		number			primary key,
	user_num		number,					--왜래키, 계정 삭제시 cascade 대신 null로 표기
	feed_num		number,					--외래키, 글 삭제시 cascade 됨
    parent_reply_num    number  default -1,
	contents	varchar2(250)	NOT NULL,
	inputdate		date		default sysdate,
	constraint fk_feed_num_reply		foreign key (feed_num) references ringo_feed(feed_num) on delete cascade,
	constraint fk_user_num_reply		foreign key (user_num) references ringo_member(user_num) on delete set null
);
CREATE SEQUENCE ringo_reply_seq;
--댓글 정보+좋아요 수+태그를 속성으로 갖는 view를 create하는 명령어
CREATE VIEW ringo_reply_with_likeandtag AS
	select R.reply_num, R.parent_reply_num, R.feed_num
	 	, M.user_id, M.nickname, M.original_profile, M.saved_profile	
	 	, R.contents, R.inputdate
	 	, count(L.user_num) as like_count
		, listagg(T.tag_name, ' ') within group (order by TR.link_num) AS tag_list
	from ringo_reply R
	left join
		ringo_member M ON R.user_num = M.user_num
	left join
	    ringo_reply_like L ON R.reply_num = L.reply_num
	left join
	    ringo_taglink_reply TR ON R.reply_num = TR.reply_num
	left join
	    ringo_tagstorage T ON TR.tag_num = T.tag_num
	GROUP BY
	    R.reply_num, R.parent_reply_num, M.user_id, M.nickname, R.contents, R.inputdate,M.original_profile, M.saved_profile, R.feed_num;
--view 사용 예시(14일 이내 작성한 글을 좋아요 수가 많은 순으로 정렬해 출력),
	select *
	from ringo_reply_with_likeandtag
	where feed_num = #{feed_num}
	order by inputdate desc;

--댓글에 달린 좋아요를 기록하는 테이블. 동일 댓글에 동일 회원이 좋아요 누르는 건 불가능
CREATE TABLE ringo_reply_like (
	reply_num			number, 					--외래키, 글 삭제시 cascade 됨
	user_num			number,					--외래키, 글 삭제시 cascade 됨
    inputdate           date        default sysdate,    --좋아요 추가시간, 알림에 사용
	primary key	(reply_num, user_num),
	constraint fk_reply_num_rlike		foreign key	(reply_num) references ringo_reply(reply_num) on delete cascade,
	constraint fk_user_num_rlike		foreign key	(user_num) references ringo_member(user_num) on delete cascade
);

--각 피드와 해당 피드에 달리는 태그를 매칭하는 테이블
CREATE TABLE ringo_taglink_feed (
	feed_num		number,			--외래키, 글삭제시 같이 삭제됨
	tag_num		number,			--외래키, 태그 삭제시 같이 삭제됨
	link_num		number,			--해당 태그가 해당 피드에 몇번째 순으로 배열된 것인지 저장하는 속성.
	primary key	(feed_num, tag_num),
	constraint fk_feed_num_tlfeed	 foreign key (feed_num)	references ringo_feed(feed_num) on delete cascade,
	constraint fk_tag_num_tlfeed	foreign key (tag_num)	references ringo_tagstorage(tag_num) on delete cascade
);
--taglink_feed전용 view create문
CREATE VIEW ringo_taglink_feed_tagname AS
	select TF.feed_num
		, TF.link_num
		, T.tag_name
	from ringo_taglink_feed TF
	left join ringo_tagstorage T ON TF.tag_num = T.tag_num;

--각 댓글와 해당 댓글에 달리는 태그를 매칭하는 테이블
CREATE TABLE ringo_taglink_reply (
	reply_num		number,						--외래키, 글삭제시 같이 삭제됨
	tag_num		number,						--외래키, 태그 삭제시 같이 삭제됨
	link_num		number,						--해당 태그가 해당 피드에 몇번째 순으로 배열된 것인지 저장하는 속성.
	primary key	(reply_num, tag_num),
	constraint fk_relpy_num_tlreply foreign key (reply_num) references ringo_reply(reply_num) on delete cascade,
	constraint fk_tag_num_tlreply foreign key (tag_num) references ringo_tagstorage(tag_num) on delete cascade
);
--taglink_reply전용 view create문
CREATE VIEW ringo_taglink_reply_tagnum AS
	select TR.reply_num
		, TR.link_num
		, T.tag_name
	from ringo_taglink_reply TR
	left join ringo_tagstorage T ON TR.tag_num = T.tag_num;

--피드, 댓글에 달 태그를 실제로 기록하는 테이블
CREATE TABLE ringo_tagstorage (
	tag_num			number				primary key,			--태그 번호
	tag_name		varchar2(60)		not null,					--실제 태그 이름
	tag_bann		char(1)				default 'N' check(tag_bann in('N', 'Y'))		--태그 금지어 설정, 금지어 아님=n, 금지어로 설정=y
);
create SEQUENCE ringo_tagstorage_seq;


--채팅룸 관련
--모든 서비스의 채팅룸 기능의 정보를 기록하는 테이블.
--카테고리에 따라 해당 서비스의 채팅메세지 테이블과 연동되어 채팅기능을 구현한다.
CREATE TABLE ringo_chatroom (
	chatroom_num		number				primary key,				--공통 채팅룸 번호
	host_num				number				references ringo_member(user_num) on delete cascade,	--해당 채팅룸의 호스트(방장) 계정 번호
	title						varchar2(60)	NOT NULL,		--채팅방 제목
	lang_category		varchar2(10)		NOT NULL	check(lang_category in('ko', 'ja', 'en')),	--채팅방 언어 설정
	modifie_date		timestamp			default sysdate,
	--가장 최근에 달린 메세지의 입력시간으로 갱신되는 날짜 속성. 수정날짜에 관한 이벤트 처리시 통일성을 위해 modifie_date로 이름을 지정해 놓았습니다.
	totalsize				number				default 10000000,
	--해당 방의 전체 메세지 최대 크기. byte단위. 기본 10MB지만 채팅룸이 채팅 분류에 따라 크기가 더 확장되거나 줄어들 수 있습니다.
    capacity             number				default 10
	--해당 방의 최대 수용 인원 수.
);

-- 채팅룸 생성용 시퀀스
CREATE SEQUENCE ringo_chatroom_seq;

-- DM (1v1) 채팅 전용 테이블
CREATE TABLE ringo_dm_chatroom
(
    dm_chatroom_num     number              primary key
    , user_num1         number              references ringo_member(user_num)
    , user_num2         number              references ringo_member(user_num)
    , modifie_date		timestamp           default sysdate
    , totalsize			number              default 10000000
);

CREATE TABLE ringo_chatroom_link
(
	user_num		number,
	chatroom_num	number,
	constraint  fk_chatroom_link_user_num foreign key (user_num) references ringo_member(user_num) on delete cascade,
	constraint  fk_chatroom_link_chatroom_num foreign key (chatroom_num) references ringo_chatroom(chatroom_num) on delete cascade
);

--범용 채팅 메세지 테이블. 사진객체를 저장하는 속성도 들어가있으며, 일반 채팅방과 DM방에서 이 테이블의 메세지 규격을 사용한다.
CREATE TABLE ringo_chat_common (
	chat_num				number			primary key,
	user_num				number,
	chatroom_num		number,
	dm_chatroom_num number,
	message				varchar2(1000)		NOT NULL,
	inputdate				timestamp 	default sysdate,
	constraint fk_user_num			foreign key	(user_num) references ringo_member(user_num) on delete cascade,
	constraint fk_chatroom_num	foreign key	(chatroom_num) references ringo_chatroom(chatroom_num) on delete cascade,
    constraint fk_dm_chatroom_num foreign key(dm_chatroom_num) REFERENCES ringo_dm_chatroom(dm_chatroom_num) on delete cascade
);

CREATE SEQUENCE ringo_chat_common_seq;



--노트관련
--각 메모장 및 단어장을 분류해서 기록하는 폴더를 저장하는 테이블.
CREATE TABLE ringo_directory (
	dir_num				number				primary key,
	user_num				number				references ringo_member(user_num) on delete cascade,	--계정 삭제시 cascade
	dir_name				varchar2(100)		NOT NULL,
	parent_dir_num		number				default -1		--자신의 상위 경로 폴더를 저장하는 속성
);
CREATE SEQUENCE ringo_directory_seq;
--각 폴더에 저장되는 실제 메모장이나 단어장을 문서 형태로 저장하는 테이블.
--file_type 속성으로 해당 문서가 메모장(tile)인지 단어장(word)인지 결정합니다.
CREATE TABLE ringo_file (
	file_num			number			primary key,			--파일 번호, 기본키
	dir_num			number,								--해당 파일이 들어가는 폴더 번호, 계정 삭제시 cascade
	user_num			number,								--해당 파일을 작성한 사용자의 계정 번호, 계정 삭제시 cascade
	title				varchar2(100)	not null,					--해당 파일의 제목
    file_text				CLOB			default 'Welcome to RingoSwap',									--실제로 작성한 문서 정보
	inputdate			date				default sysdate,		--최초 작성일
	modifie_date		date				default sysdate,		--최근 수정일
	lang_type			varchar2(10)	default 'ko' check(lang_type in ('ko', 'ja', 'en')), 	--단어장 언어 구분
	file_type	 		varchar2(10) check(file_type in ('note', 'word')),	--문서 형식, file = 메모장, word = 단어장
    constraint fk_dir_num_file		FOREIGN KEY (dir_num) REFERENCES ringo_directory(dir_num) ON DELETE CASCADE,
    constraint fk_user_num_file	FOREIGN KEY (user_num) REFERENCES ringo_member(user_num) on delete cascade
);
CREATE SEQUENCE ringo_file_seq;
CREATE TABLE ringo_file_photo(
	file_num			number		not null,					--file_num과 같이 복합 기본키 
	photo_num		number		not null,					--photo_num과 같이 복합 기본키
	user_num			number		not null,					--member에서 받아오는 왜래키
	inputdate			date			default sysdate,		--사진 등록일자
	original_note		varchar2(100),						--노트 사진 실제 이름
	saved_note		varchar2(100),						--노트 사진 저장 이름
	primary key(file_num, photo_num),
	constraint fk_file_num_fphoto		foreign key(file_num)	references ringo_file(file_num) on delete cascade,
	constraint fk_user_num_fphoto	foriegn key(user_num) references ringo_member(user_num) on delete cascade
);
--단어장 파일의 각 단어 저장부
CREATE TABLE ringo_word (
	word_num		number			primary key,
	file_num		number			references ringo_file(file_num) on delete cascade,
	user_num		number			references ringo_member(user_num) on delete cascade,
	word				varchar2(100)	not null,		--단어부, 적어야 합니다.
	pron				varchar2(100),					--발음부, 적지 않아도 됩니다.
	mean			varchar2(100)	not null,		--의미부, 적어야 합니다.
	description	varchar2(500)	, 				--단어카드 설명
	inputdate		timestamp			default sysdate
);
CREATE SEQUENCE ringo_word_seq;
--오답노트용 단어 테이블
CREATE TABLE ringo_word_wrong (
	word_num		number			primary key,        --ringo_word 테이블에 기록된 word_num을 그대로 받아, 중복된 오답 단어가 기록되지 않도록 합니다.
	user_num		number			references ringo_member(user_num) on delete cascade,
	word				varchar2(100)	not null,		--단어부, 적어야 합니다.
	pron				    varchar2(100),					--발음부, 적지 않아도 됩니다.
	mean		    	varchar2(100)	not null,		--의미부, 적어야 합니다.
	description     varchar2(500), 				--단어카드 설명
	inputdate		timestamp		default sysdate
);


--싱글게임 난이도 정보를 기록하는 테이블
create table ringo_game_setting (
	user_num			number				NOT NULL,				--싱글게임을 실행하는 유저의 계정 번호, 왜래키이면서 기본키입니다
	file_num			number				default -1,						--싱글게임 문제제출에 사용하는 단어장 파일 번호, 왜래키X, -1=단어장이 설정되지 않은 상태
	form_type			varchar2(15)		default 'title_tomean' check(form_type in ('title_tomean', 'mean_totitle', 'title_only', 'mean_only')),	--문제 형태 설정, title_tomean=제목-의미순, mean_totitle=의미-제목순, title_only=제목만, mean_only=의미만
	order_type			varchar2(10)		default 'random' check(order_type in ('random', 'first_in', 'latest', 'atoz', 'ztoa')),		--문제 배열 방법, first_in=등록순, random=랜덤 출력, latest=최신순, atoz=A-Z, ztoa=Z-A
	description_show	number(1)		default 1 check(description_show in (0,1)),		--설명 표시 여부, 1=표시, 0=표시안함
	pron_show		number(1)			default 0 check(pron_show in(0, 1)),	 --발음도 사용할 것인지 여부(받아쓰기(DIctation)에만 사용)/0=비사용, 1=사용
	question_num	number				default 0,							--문제 갯수/0=모든 문제 출력, 그외=숫자만큼 문제출력
    match_use		number(1)        default 0 check(match_use in (0, 1)),	--받아쓰기 문제에서 발음을 사용할 것인지 여부/0=사용안함, 1=사용함
	primary key(user_num),
	constraint fk_user_num_sg	foreign key (user_num)	references ringo_member(user_num) on delete cascade
);
--싱글게임 로그를 기록하는 테이블
    create table ringo_game_log (
	gamelog_num		number				primary key,		--기본키
	user_num				number				not null,				--왜래키
	file_num				number				not null,				--단어장 번호를 기록하는 속성. 왜래키X
	file_title					varchar2(100)	not null,				--단어장 제목을 기록하는 속성. 왜래키X
	game_category		varchar2(10) 	check(game_category in('mcq', 'flashcard', 'dictation')),		--플레이한 게임의 종류를 기록하는 속성
	lang_category		varchar2(2)		default 'ko' check(lang_category in ('ko', 'ja', 'en', 'all')),				--어떤 언어로 게임을 플레이 했는지 기록하는 속성
	score					number		default 0,			--해당 게임의 성적
	point						number		default 0,			--해당 게임으로 획득하는 포인트
	inputdate				date			default sysdate,	--해당 게임을 진행한 날짜
	constraint fk_user_num_gamelog	foreign key (user_num)	references ringo_member(user_num) on delete cascade
);
create sequence ringo_game_log_seq;
--회원관련
--회원정보 테이블
CREATE TABLE ringo_member (
	user_num 				number			primary key,				--회원 고유 번호, 기본키, 마이피드 및 마이페이지 게시글의 게시글번호로도 활용합니다
	user_id					varchar2(30)		NOT NULL unique,	--회원 id
	password				varchar2(255)	NOT NULL,			--비밀번호
	username				varchar2(30)		NOT NULL,			--회원 닉네임
	first_name				varchar2(20)		NOT NULL,			--회원 이름
	last_name				varchar2(15)		NOT NULL,			--회원 성
	gender					char(1)			NOT NULL check(gender in('F', 'M', 'N')),	--성별
	birth_date				date					NOT NULL,			--생년월일
	email	 					varchar2(60)	NOT NULL unique,	--이메일(인증용)
	native_lang			varchar2(8)		NOT NULL,			--모국어 설정
	target_lang			varchar2(8)		NOT NULL,			--학습언어 설정
	--취미 및 기타 선택입력 정보
	original_profile		varchar2(100)	default '5.jpg',		--프로필 사진 실제 파일 이름
	saved_profile			varchar2(100)	default '5.jpg',		--프로필 사진 저장경로에서의 이름
	introduction			varchar2(1500),								--자기소개
	mbti						varchar2(5)		check(mbti in('NONE', 'ISFJ', 'ISFP', 'ISTJ', 'ISTP', 'INFJ', 'INFP', 'INTJ', 'INTP', 'ESFJ', 'ESFP', 'ESTJ', 'ESTP', 'ENFJ', 'ENFP', 'ENTJ', 'ENTP')),
	--mbti 성격 지정, 16개+지정안했을때 전용인 NONE의 17가지로 선택지를 한정함
	--해당 계정의 유료, 무료재화 보유량에 관한 정보
	point						number				default 0,				--포인트, 무료재화
	cash						number				default 0,				--캐쉬, 유료재화
	--계정 권한에 관한 정보
	rewrite_time			date					default sysdate,		--수정일자
	role_name				varchar2(15)		default 'ROLE_USER' check(role_name in ('ROLE_USER', 'ROLE_DELETE', 'ROLE_VIP', 'ROLE_ADMIN')),
	--일반사용자 = role_user, VIP사용자 = role_vip, 관리자=role_admin, '탈퇴한 유저는 delete_user로 변경
	enabled					number(1)			default 1 check(enabled in(0, 1)),	--계정 사용가능 여부, 가능=1, 불가=0
	--정보공개 여부에 관한 정보
	ranking_open		char(1)				default 'Y',				--랭킹정보 공개여부
	email_open			char(1)				default 'Y',				--이메일 공개여부
	follow_open			char(1)				default 'Y',				--팔로워수 공개여부
	gps_open				char(1)				default 'Y',				--장소(gps) 공개여부
	trans_lang				varchar2(8)		default 'kor' check(trans_lang in ('kor', 'jap', 'eng'))			--기본 번역언어 설정
);
--member전용 시퀸스
create SEQUENCE ringo_member_seq;

--마이탭에 표시하기 위해 기존 회원정보에 더해 프로필사진정보+팔로워/팔로잉 갯수+태그 정보를 같이 출력하는 view create문
CREATE VIEW ringo_member_with_mypage AS
	select M.user_num, M.user_id, M.username
		, M.native_lang, M.target_lang
		, M.introduction
		, M.original_profile, M.saved_profile
		, count(FW.follower_num) as fr_count				--팔로워 수를 기록하는 속성
		, count(FE.followee_num) as fe_count				--팔로우 수를 기록하는 속성
		, listagg(T.tag, ' ') within group (order by TL.tag_num) as tag_list
	from ringo_member M
	left join ringo_member_follow FW ON M.user_num = FW.follower_num
	left join ringo_member_follow FE ON M.user_num = FE.followee_num
	left join ringo_taglink_member TL ON M.user_num = TL.user_num
	left join ringo_tagstorage_member T ON TL.tag_num = T.tag_num
	group by
		M.user_num, M.user_id, M.username, M.native_lang, M.target_lang
        , M.introduction, M.original_profile, M.saved_profile;

--각 회원과 해당 회원이 갖는 태그를 매칭하는 테이블
CREATE TABLE ringo_taglink_member (
	user_num				number,			--멤버 테이블 외래키, tag_num과 복합하여 복합 기본키 구성
	tag_num				number,			--태그저장소 테이블 외래키, user_num과 복합하여 복합 기본키 구성
	primary key(user_num, tag_num),
	constraint fk_tag_num	foreign key	(tag_num) references ringo_tagstorage_member(tag_num) on delete cascade,
	constraint fk_user_num	foreign key	(user_num) references ringo_member(user_num) on delete cascade
);
--회원에 기록할 취미 태그를 직접 기록하는 테이블
CREATE TABLE ringo_tagstorage_member (
	tag_num		number				primary key,		--태그 번호
	tag			varchar2(60)	not null					--실제 태그 이름
);
--회원태그 목록. 아래 insert문을 사용하여 DB에 미리 입력할 것. []로 감싸진 것에 해당하는 정보를 기입하고 사용
INSERT ALL
   INTO ringo_tagstorage_member VALUES (1, 'MBTI')
   INTO ringo_tagstorage_member VALUES (2, '인스타그램')
   INTO ringo_tagstorage_member VALUES (3, '만화')
   INTO ringo_tagstorage_member VALUES (4, 'E-스포츠')
   INTO ringo_tagstorage_member VALUES (5, '캠핑')
   INTO ringo_tagstorage_member VALUES (6, '온천')
   INTO ringo_tagstorage_member VALUES (7, '쇼핑')
   INTO ringo_tagstorage_member VALUES (8, '스시')
   INTO ringo_tagstorage_member VALUES (9, '여행')
   INTO ringo_tagstorage_member VALUES (10, '미드')
   INTO ringo_tagstorage_member VALUES (11, '전시회')
   INTO ringo_tagstorage_member VALUES (12, 'PC방')
   INTO ringo_tagstorage_member VALUES (13, '축구')
   INTO ringo_tagstorage_member VALUES (14, '야구')
   INTO ringo_tagstorage_member VALUES (15, '게임')
   INTO ringo_tagstorage_member VALUES (16, '애니메이션')
   INTO ringo_tagstorage_member VALUES (17, '운동')
   INTO ringo_tagstorage_member VALUES (18, '수영')
   INTO ringo_tagstorage_member VALUES (19, '베이킹')
   INTO ringo_tagstorage_member VALUES (20, '커뮤니티')
   INTO ringo_tagstorage_member VALUES (21, '패션')
   INTO ringo_tagstorage_member VALUES (22, 'BTS')
   INTO ringo_tagstorage_member VALUES (23, '클라이밍')
   INTO ringo_tagstorage_member VALUES (25, '음악')
   INTO ringo_tagstorage_member VALUES (26, '주식')
   INTO ringo_tagstorage_member VALUES (27, '카페')
   INTO ringo_tagstorage_member VALUES (28, '주류')
   INTO ringo_tagstorage_member VALUES (29, '블로그')
   INTO ringo_tagstorage_member VALUES (30, '유투브')
   INTO ringo_tagstorage_member VALUES (31, '동물')
   INTO ringo_tagstorage_member VALUES (32, '식물')
   INTO ringo_tagstorage_member VALUES (33, '언어교환')
   INTO ringo_tagstorage_member VALUES (34, '문화')
   INTO ringo_tagstorage_member VALUES (35, '과학')
   INTO ringo_tagstorage_member VALUES (36, '역사')
   INTO ringo_tagstorage_member VALUES (37, '유학')
   INTO ringo_tagstorage_member VALUES (38, '취직')
   INTO ringo_tagstorage_member VALUES (39, '음식')
   INTO ringo_tagstorage_member VALUES (40, '코미디')
SELECT * FROM DUAL;
insert into ringo_tagstorage_member
values  ([tag_num], [tag]);


CREATE TABLE ringo_member_follow(
	follower_num			number,
	followee_num		number,
	primary key(follower_num, followee_num),
	constraint fk_follower_num		foreign key (follower_num) references ringo_member(user_num) on delete cascade,
	constraint fk_followee_num		foreign key (follower_num) references ringo_member(user_num) on delete cascade
);





--공지관련
--공지 게시글의 정보를 기록하는 테이블
CREATE TABLE ringo_notification (
	noti_num					number					primary key,		--공지글 번호
	admin_num				number					references ringo_member(user_num) on delete cascade,
	title				varchar2(100)		not null,				--제목
	contents			varchar2(3000)		NOT NULL,		--내용
	views				number					default 0,			--조회수
	inputdate		date					default sysdate,		--작성일
	modifie_date	date					default sysdate		--수정일
);




--피드 관련
--피드 테이블
CREATE TABLE ringo_feed (
	feed_num			number				primary key,			--피드 글번호
	user_num			number				references ringo_member(user_num) on delete cascade,	--유저 키, 피드 작성자
	contents			varchar2(3000)	NOT NULL,			--내용
	inputdate			date					default sysdate,		--작성일
	enabled				number(1)			default 1 check(enabled in	0, 1)		--해당 피드가 삭제대기를 위해 내려갔는지 여부/ 0=피드 내려감, 1=피드 안 내려감
);
--피드 정보+user_id+좋아요 수+태그를 속성으로 갖는 view를 create하는 명령어
CREATE VIEW ringo_feed_with_likeandtag AS
SELECT F.feed_num
	, M.user_id
	, M.original_profile
	, M.saved_profile	
	, F.contents
	, F.inputdate
	, count(L.user_num) AS like_count
	, listagg(T.tag_name, ' ') within group (order by TF.link_num) AS tag_list
from
    ringo_feed F
left join
	ringo_member M ON F.user_num = M.user_num
left join
    ringo_feed_like L ON F.feed_num = L.feed_num
left join
    ringo_taglink_feed TF ON F.feed_num = TF.feed_num
left join
    ringo_tagstorage T ON TL.tag_num = T.tag_num
GROUP BY
    F.feed_num, M.user_id, MP.original_profile, MP.saved_profile	, F.contents, F.inputdate;
--view 사용 예시(14일 이내 작성한 글을 좋아요 수가 많은 순으로 정렬해 출력),
select * from ringo_feed_with_likeandtag
where (sysdate - inputdate) <= 14
order by like_count DESC;

--피드에 사진을 넣는 테이블, 한 피드에 여러개의 사진을 넣을 수 있다.
CREATE TABLE ringo_feed_photo (
	photo_num		number				primary key,			--피드 사진 번호
	feed_num			number,										--사진이 입력된 글번호를 불러오는 외래키
	origin_file			varchar2(100)	not null,					--실제 파일명
	saved_file			varchar2(100)	not null,					--저장된 경로에서의 파일명
	inputdate			date					default sysdate,		--사진 업로드 날짜 및 시간
	description		varchar2(150),								--사진에 대한 설명이나 캡션
	photo_size		number,										--사진 파일의 크기 (바이트 단위)
	photo_format		varchar2(20)		not null,					--사진의 확장자나 형식 (예: JPEG, PNG, GIF 등)
	resolution			varchar2(12),								--사진의 해상도 (예: 1920x1080)
	constraint	fk_feed_num_ph	foreign key (feed_num) references ringo_feed(feed_num) on delete cascade
);

--피드에 달린 좋아요를 기록하는 테이블. 동일 피드에 동일 회원이 중복해서 좋아요 누르는건 불가능
CREATE TABLE ringo_feed_like (
	feed_num			number, 						--외래키, user와 합쳐서 복합 기본키로 사용
	user_num			number,						--외래키, feed와 합쳐서 복합 기본키로 사용
	primary key	(feed_num, user_num),		--두 외래키를 복합 기본키로 설정
	constraint fk_feed_num_flike	foreign key (feed_num)	references ringo_feed(feed_num) on delete cascade,
	constraint fk_user_num_flike	foreign key (user_num)	references ringo_member(user_num) on delete cascade
);

--피드에 달린 댓글을 기록하는 테이블.
CREATE TABLE ringo_reply (
	reply_num		number			primary key,
	user_num		number,					--왜래키, 계정 삭제시 cascade 대신 null로 표기
	feed_num		number,					--외래키, 글 삭제시 cascade 됨
	contents	varchar2(250)	NOT NULL,
	inputdate		date		default sysdate,
	constraint fk_feed_num_reply		foreign key (feed_num) references ringo_feed(feed_num) on delete cascade,
	constraint fk_user_num_reply		foreign key (user_num) references ringo_member(user_num) on delete set null
);
--댓글 정보+좋아요 수+태그를 속성으로 갖는 view를 create하는 명령어
CREATE VIEW ringo_reply_with_likeandtag AS
	select R.reply_num
	 	, M.user_ id
		, M.original_profile
		, M.saved_profile	
	 	, R.feed_num
	 	, R.contents
	 	, R.inputdate
	 	, count(L.user_num) as like_num
		, listagg(T.tag_name, ' ') within group (order by TR.link_num) AS tag_list
	from ringo_reply R
	left join
		ringo_member M ON F.user_num = M.user_num
	left join
	    ringo_reply_like L ON F.reply_num = L.reply_num
	left join
	    ringo_taglink_reply TR ON F.reply_num = TR.reply_num
	left join
	    ringo_tagstorage T ON TL.tag_num = T.tag_num
	GROUP BY
	    R.feed_num, R.user_num, R.contents, R.inputdate;
--view 사용 예시(14일 이내 작성한 글을 좋아요 수가 많은 순으로 정렬해 출력),
	select *
	from ringo_reply_with_likeandtag
	where feed_num = #{feed_num}
	order by inputdate desc;

--댓글에 달린 좋아요를 기록하는 테이블. 동일 댓글에 동일 회원이 좋아요 누르는 건 불가능
CREATE TABLE ringo_reply_like (
	reply_num			number, 					--외래키, 글 삭제시 cascade 됨
	user_num			number,					--외래키, 글 삭제시 cascade 됨
	primary key	(reply_num, user_num),
	constraint fk_reply_num_rlike		foreign key	(reply_num) references ringo_reply(reply_num) on delete cascade,
	constraint fk_user_num_rlike		foreign key	(user_num) references ringo_member(user_num) on delete cascade
);

--각 피드와 해당 피드에 달리는 태그를 매칭하는 테이블
CREATE TABLE ringo_taglink_feed (
	feed_num		number,			--외래키, 글삭제시 같이 삭제됨
	tag_num		number,			--외래키, 태그 삭제시 같이 삭제됨
	link_num		number,			--해당 태그가 해당 피드에 몇번째 순으로 배열된 것인지 저장하는 속성.
	primary key	(feed_num, tag_num),
	constraint fk_feed_num_tlfeed	foreign key (feed_num)	references ringo_feed(feed_num) on delete cascade,
	constraint fk_tag_num_tlfeed	foreign key (tag_num)	references ringo_tagstorage(tag_num) on delete cascade
);
--taglink_feed전용 view create문
CREATE VIEW ringo_taglink_feed_with_tagname AS
	select TF.feed_num
		, TF.link_num
		, T.tag_name
	from ringo_taglink_feed TF
	left join ringo_tagstorage T ON TF.tag_num = T.tag_num

--각 댓글와 해당 댓글에 달리는 태그를 매칭하는 테이블
CREATE TABLE ringo_taglink_reply (
	reply_num		number,						--외래키, 글삭제시 같이 삭제됨
	tag_num		number,						--외래키, 태그 삭제시 같이 삭제됨
	link_num		number,						--해당 태그가 해당 피드에 몇번째 순으로 배열된 것인지 저장하는 속성.
	primary key	(feed_num, tag_num),
	constraint fk_relpy_num_tlreply foreign key (reply_num) references ringo_reply(reply_num) on delete cascade,
	constraint fk_tag_num_tlreply foreign key (tag_num) references ringo_tagstorage(tag_num) on delete cascade
);
--taglink_reply전용 view create문
CREATE VIEW ringo_taglink_reply_with_tagname AS
	select TR.reply_num
		, TR.link_num
		, T.tag_name
	from ringo_taglink_reply TR
	left join ringo_tagstorage T ON TR.tag_num = T.tag_num

--피드, 댓글에 달 태그를 실제로 기록하는 테이블
CREATE TABLE ringo_tagstorage (
	tag_num			number				primary key,			--태그 번호
	tag_name		varchar2(60)		not null,					--실제 태그 이름
	tag_bann		char(1)				default 'N' check(tag_bann in('N', 'Y'))		--태그 금지어 설정, 금지어 아님=n, 금지어로 설정=y
);



--채팅룸 관련
--모든 서비스의 채팅룸 기능의 정보를 기록하는 테이블.
--카테고리에 따라 해당 서비스의 채팅메세지 테이블과 연동되어 채팅기능을 구현한다.
CREATE TABLE ringo_chatroom (
	chatroom_num		number				primary key,				--공통 채팅룸 번호
	host_num				number				references ringo_member(user_num) on delete cascade,	--해당 채팅룸의 호스트(방장) 계정 번호
	title						varchar2(60)	NOT NULL,		--채팅방 제목
	lang_category		varchar2(10)		NOT NULL	check(lang_category in('kor', 'jap', 'eng')),	--채팅방 언어 설정
	gen_category		varchar2(10)		NOT NULL	check(gen_category in('enjoy', 'study', 'dm', 'voice', 'live', 'game')),	--채팅반 기능 분류 설정
	modifie_date		timestamp			default sysdate,
	--가장 최근에 달린 메세지의 입력시간으로 갱신되는 날짜 속성. 수정날짜에 관한 이벤트 처리시 통일성을 위해 modifie_date로 이름을 지정해 놓았습니다.
	totalsize				number				default 10000000
	--해당 방의 전체 메세지 최대 크기. byte단위. 기본 10MB지만 채팅룸이 채팅 분류에 따라 크기가 더 확장되거나 줄어들 수 있습니다.
);

CREATE TABLE ringo_chatroom_link
(
	user_num		number,
	chatroom_num	number,
	constraint  fk_chatroom_link_user_num foreign key (user_num) references ringo_member(user_num) on delete cascade,
	constraint  fk_chatroom_link_chatroom_num foreign key (chatroom_num) references ringo_chatroom(chatroom_num) on delete cascade
);

--범용 채팅 메세지 테이블. 일반 채팅방과 DM방에서 이 테이블의 메세지 규격을 사용한다.
CREATE TABLE ringo_chat_common (
	chat_num				number			primary key,
	user_num				number,
	chatroom_num		number,
	chatphoto_num		number,
	message				varchar2(1000)		NOT NULL,
	inputdate				timestamp 	default sysdate,
	constraint fk_user_num			foreign key	(user_num) references ringo_member(user_num) on delete cascade,
	constraint fk_chatroom_num	foreign key	(chatroom_num) references ringo_chatroom(chatroom_num) on delete cascade,
	constraint fk_chatphoto_num	foreign key	(chatphoto_num) references ringo_chatphoto(chatphoto_num) on delete cascade
);
--라이브 방에서 사용하는 채팅 메세지 테이블. 기본적으로 이미지 업로드 기능은 제외하고 메세지와 이모티콘만 보낼 수 있습니다.
CREATE TABLE ringo_chat_live (
	live_chat_num	number				primary key,		--라이브채팅 메세지 기본키
	user_num			number,						--채팅을 입력한 사용자의 계정 번호
	live_num			number,						--채팅을 입력한 라이브 방 번호
	message			varchar2(1000)	not null,
	inputdate			timestamp			default sysdate
	constraint fk_user_num		foreign key	(user_num) references ringo_member(user_num) on delete cascade,
	constraint fk_live_num		foreign key	(live_num) references ringo_liveroom(live_num) on delete cascade
);
--멀티게임 채팅메세지 테이블
CREATE TABLE ringo_chat_multi (
	multi_chat_num		number				primary key,		--멀티게임 채팅 메세지 기본키
	multi_num				number				not null,				--멀티게임방 번호
	user_num				number				not null,				--메세지 작성자 계정 번호
	message				varchar2(1000),							--메세지 내용
	inputdate		TIMESTAMP		default sysdate,			--메세지 작성일
	constraint fk_multi_num foreign key (multi_num) references ringo_multiroom(multi_num) on delete cascade,
	constraint fk_user_num foreign key (user_num) references ringo_member(user_num) on delete cascade
);
--채팅 테이블에서 보낼 수 있는 이미지를 처리하는 테이블.
CREATE TABLE ringo_chatphoto (
	chatphoto_num		number				primary key,							-- '메시지가 사진인 경우, 해당 사진의 정보(사진 테이블)를 참조'
	file_size				number				default 10000000,			--파일 객체 용량, 기본 10MB
	origin_file				varchar2(100),
	saved_file				varchar2(100)
);
--음성 채팅방에서 각 회원이 음성 채팅 서비스가 허용되었는지 여부를 기록하는 테이블.
--일반 사용자는 기본 서비스 비허용 상태이지만 방장은 서비스 허용 상태로 시작하며, 방장은 다른 사용자의 서비스 권한을
--허용으로 변경할 수 있습니다. 
CREATE TABLE ringo_voice_permission (
	user_num			number,
	chatroom_num	number,
	voice_per			char(1)		default 'N' check(voice_per in ('N', 'Y')),
	constraint fk_user_num	FOREIGN KEY (user_num) REFERENCES ringo_member(user_num) on delete cascade,
	constraint fk_chatroom_num foreign key (chatroom_num) references ringo_chatroom(chatroom_num) on delete cascade
);

--노트관련
--각 메모장 및 단어장을 분류해서 기록하는 폴더를 저장하는 테이블.
CREATE TABLE ringo_directory (
	dir_num				number				primary key,
	user_num				number				references ringo_member(user_num) on delete cascade,	--계정 삭제시 cascade
	dir_name				varchar2(100)		NOT NULL,
	parent_dir_num		number				default -1		--자신의 상위 경로 폴더를 저장하는 속성
);
--각 폴더에 저장되는 실제 메모장이나 단어장을 문서 형태로 저장하는 테이블.
--file_type 속성으로 해당 문서가 메모장(tile)인지 단어장(word)인지 결정합니다.
CREATE TABLE ringo_file (
	file_num			number			primary key,			--파일 번호, 기본키
	dir_num			number,								--해당 파일이 들어가는 폴더 번호, 계정 삭제시 cascade
	user_num			number,								--해당 파일을 작성한 사용자의 계정 번호, 계정 삭제시 cascade
	title				varchar2(100)	not null,					--해당 파일의 제목
    file_text				CLOB,									--실제로 작성한 문서 정보
	inputdate			date				default sysdate,		--최초 작성일
	modifie_date		date				default sysdate,		--최근 수정일
	lang_type			varchar2(10)	default 'kor' check(lang_type in ('kor', 'jap', 'eng')), 	--단어장 언어 구분
	file_type	 		varchar2(10) check(file_type in ('note', 'word')),	--문서 형식, file = 메모장, word = 단어장
    constraint fk_dir_num_file		FOREIGN KEY (dir_num) REFERENCES ringo_directory(dir_num) ON DELETE CASCADE,
    constraint fk_user_num_file	FOREIGN KEY (user_num) REFERENCES ringo_member(user_num) on delete cascade
);
--단어장 파일의 각 단어 저장부
CREATE TABLE ringo_word (
	word_num		number			primary key,
	file_num		number			references ringo_file(file_num) on delete cascade,
	user_num		number			references ringo_member(user_num) on delete cascade,
	word				varchar2(100)	not null,		--단어부, 적어야 합니다.
	pron				varchar2(100),					--발음부, 적지 않아도 됩니다.
	mean			varchar2(100)	not null,		--의미부, 적어야 합니다.
	lang_type		varchar2(10)		default 'kor' check(lang_type in ('kor', 'jap', 'eng')), 
	inputdate		timestamp			default sysdate
);

--라이브 관련
--라이브 방 테이블
CREATE TABLE ringo_liveroom (
	live_num					number			primary key,			--라이브룸 번호(프라이머리 키로 사용)
	host_num					number			references ringo_member(user_num) on delete cascade		--'members의 users_num를 reference',
	live_title						varchar2(60)	NOT NULL,			--제목
	live_cam					number(1)		default 0 check(live_cam in ('0', '1')),	-- 카메라 여부, 0 cam off 1 cam on	
	live_lang					varchar2(8)	NOT NULL,			--해당 라이브 방의 사용 언어
	viewer_max		number			default 0				--해당 라이브 방의 최대 시청자 수
);
--라이브 방 각 시청자의 특정 방의 즐겨찾기 여부
CREATE TABLE ringo_liveroom_link(
	user_num			number,
	live_num			number,
	live_mark			number			default 0 check(live_mark in(0, 1)),				-즐겨찾기, 0=즐겨찾기 안함, 1=즐겨찾기 함
	primary key(user_key, live_num),
    constraint fk_user_num FOREIGN KEY (user_num) REFERENCES ringo_member(user_num) on delete cascade,
    constraint fk_live_num FOREIGN KEY (live_num) REFERENCES ringo_liveroom(live_num) on delete cascade
);
--라이브 방 도네이션 테이블
CREATE TABLE ringo_liveroom_donation (
	live_donation_num		number		primary key,	--기본키
	live_num					number,						--후원보낸 방번호
	host_num			number,				-- '후원받는 사람'
	guest_num			number,				--'후원하는 사람'
	donation_cash	number		default 100,	--후원 금액, 유료재화(cash)로만 후원가능
	inputdate			timestamp	default sysdate,		--후원보낸 날짜
	constraint fk_live_num			foreign key (live_num) 			references		ringo_liveroom(live_num) on delete null,				--라이브 방이 삭제되면 방번호를 null로 변경(삭제되지 않음)
	constraint fk_live_host_num	foreign key (live_host_num)	references		ringo_member(user_num) on delete cascade,		--후원받은 호스트게정이 삭제되면 같이 삭제
	constraint fk_live_guest_num	foreign key (live_guest_num) references		ringo_member(user_num) on delete null		--후원자 계정이 삭제되면 이름없음으로 표시
);
--각 라이브 방의 시간당 시청자 수를 집계하는 테이블
CREATE TABLE ringo_liveroom_viewer_trend (
	live_trend_num		number			primary key,		--라이브 시간당 시청자 수 집계 테이블 기본키
	live_num				number,								--라이브 방 번호
	viewer_num	number			default 0,			--지정된 시간단위마다 서버에서 현재 시청자 수를 받아 저장하는 속성
	inputdate				timestamp		default sysdate,		--시청자 수를 입력받은 시간을 기록하는 속성
	constraint fk_live_num	foregin key	(live_num) references ringo_liveroom(live_num) on delete cascade
);

--알림 관련
--알림 테이블
CREATE TABLE ringo_alert (
	alert_num				number			primary key,		--알람 테이블의 기본키
	alert_type				varchar2(10),						--알림의 분류를 기록하는 속성, dm, live, chat, feed, fallow 등이 존재한다.
	receiver_num		number			NOT NULL,		-- 알림을 받는 사용자를 기록하는 속성 'members의 users_num'
	sender_num			number			NOT NULL,		-- 알림을 보낸 사용자를 기록하는 속성 'members의 users_num'
	type_num				number			not null,				--해당 알림의 분류에 따라 해당하는 게시글의 번호를 기록하는 속성
	message_num		number			NOT NULL,		--해당 알림의 내용의 위치를 기록하는 속성
	alert_checked		number			default 0,			-- 해당 알림이 읽혔는지 안 읽혔는지 확인하는 속성/ '0 unchecked, 1 checked'
	inputdate				TIMESTAMP	default sysdate,			--해당 알림이 발생한 시각을 기록하는 테이블
	constraint fk_receiver_num	foreign key (receiver_num)	references ringo_member(user_num) on delete cascade,
	constraint fk_sender_num		foreign key (sender_num)	references ringo_member(user_num) on delete cascade
);

--스토어 관련
--스토어 서비스에서 판매하는 악세서리 아이템들을 기록하는 테이블
CREATE TABLE ringo_item (
	item_num				number			primary key,			--아이템 고유번호, 기본키
	item_point				number 		default 0,		--아이템 가격(무료재화)
	item_cash				number 		default 0,		--아이템 가격(유료재화)
	item_name			varchar2(60)	NOT NULL,	--아이템 이름, origin filename의 열할도 겸한다
	item_image_url		varchar2(200),					--아이템 저장경로 값, saved filename의 역할을 한다
	inputdate				date				default sysdate,	--아이템 등록일자
	item_category		varchar2(20)	NOT NULL,	--아이템 분류
	item_bann				number(1)		default 0 check(item_bann in(0, 1))
	--아이템이 스토어에서 내려갔는지 여부/ 0=안 내려감, 1=내려감
);
--어떤 회원이 어떤 아이템을 구매했는지 저장하는 테이블
CREATE TABLE ringo_item_purchase (
	purchase_num		number			NOT NULL,		--구매번호, 기본키
	item_num				number,				--어떤 상품을 기록했는지를 저장하는 아이템 번호 속성
	user_num				number			NOT NULL,		--어떤 회원이 구매했는지 저장하는 계정 번호 속성
	inputdate				TIMESTAMP	default sysdate,	--구매날짜
	payment_method	number			NOT NULL check(paymenet_method in(0, 1),		--어떤 재화로 구매했는지 저장하는 속성/ 0=point, 1=cash
	constraint fk_item_num foreign key (item_num) references ringo_item(item_num) on delete set null,
	constraint fk_user_num foreign key (user_num) references ringo_member(user_num) on delete cascade
);
--어떤 회원이 어떤 아이템을 장바구니에 담았는지 저장하는 테이블
CREATE TABLE ringo_item_cart (
	user_num			number,		--장바구니에 담은 회원 계정 번호, item_num과 복합하여 복합 기본키 구성
	item_num			number,		--아이템 번호, user_num과 복합하여 복합 기본키 구성
	primary key	(user_num, item_num),
	constraint fk_user_num foreign key (user_num) references ringo_member(user_num) on delete cascade,
	constraint fk_item_num foreign key (item_num) references ringo_item(item_num) on delete cascade
);
--각 회원의 유료재화를 얼마만큼 구매, 소비했는지를 기록하는 테이블
CREATE TABLE ringo_buy_cash (
	cash_num					number			primary key,			--매매기록 번호, 기본키
	user_num					number			references ringo_member(user_num) on delete cascade,	--회원 번호
	purchase_category	varchar2(50)	NOT NULL,	--해당 매매번호의 재화 결제, 아이템 구매등의 분류를 저장하는 속성
	cash_buy					number			NOT NULL default 0,	--유료재화를 얼마만큼 소비/획득했는지 저장하는 속성
	buytext						varchar2(100),				--해당 매매기록의 대략적인 기록을 저장하는 속성
	inputdate					TIMESTAMP	default sysdate			--해당 매매기록의 발생시각을 저장하는 속성
);

--게임관련
--멀티게임의 게임방 테이블, 각 게임당 인원수/ 스무고개 4, 끝말잇기2~4, 캐치마인드 3~6, 사천성 1vs1
CREATE TABLE ringo_multiroom (
	multi_num		number				primary key,		--멀티게임방 번호, 기본키
	host_num		number,		--방장의 계정 번호
	opendate		date					default sysdate,	--게임방 개설일자
	capacity		number				DEFAULT 4,		--게임방 참여자 상한, 기본4, 게임에 따라 상한 지정
	category		varchar2(30)		not null check(category in('sichuan', 'catch', 'siritory', 'twenty')),
	--게임분류/ sichuan=사천성, catch=캐치마인드, siritory=끝말잇기, twenty=스무고개
	constraint fk_host_num foreign key (host_num) references ringo_member(user_num) on delete cascade
);
--각 회원이 각 게임방 플레이 후 발생하는 전적을 기록하는 테이블
CREATE TABLE ringo_multiroom_score (
	multi_num		number				not null,					--스코어를 얻은 게임방 번호
	user_num		number				not null,					--스코어를 얻는 계정 번호
	playdate		TIMESTAMP		default sysdate,		--게임을 끝낸 시각
	multi_record	char(1),					--해당 게임의 전적. 'v'=승, 'd'=패, 'q'=실격패, 그외=무승부, null=경기오류
	score			number,				--해당 멀티게임 플레이로 획득한 스코어 점수
	category		varchar2(20)		NOT NULL check(category in('sichuan', 'catch', 'siritory', 'twenty')),
	--플레이한 게임 분류/ sichuan=사천성, catch=캐치마인드, siritory=끝말잇기, twenty=스무고개
	primary key(multi_num, user_num),
	constraint fk_multi_num foreign key (multi_num) references ringo_multiroom(multi_num) on delete cascade,
	constraint fk_user_num foreign key (user_num) references ringo_member(user_num) on delete cascade
);
--멀티게임 랭킹을 기록하는 테이블
CREATE TABLE ringo_ranking (
	user_num			number				NOT NULL,			--유저 회원 번호, category와 복합하여 복합 기본키를 구성합니다.
	category			varchar2(10) 	check(category in('sichuan', 'catch', 'siritory', 'twenty', 'total')),
	--게임분류, user_num과 복합하여 복합 기본키를 구성합니다./total=전체 랭킹
	score				number				default 0,				--해당 분류의 게임 점수 총합(시즌마다 초기화함)
	maxscore			number				default 0,				--사용자가 해당 분류의 게임으로 획득했던 최대 점수
	last_playetime	TIMESTAMP		default sysdate,		--최근 플레이한 시각
	primary key(user_num, category),			--계정 번호와 게임분류를 복합하여 기본키로 구성합니다
	constraint fk_user_num	foreign key (user_num)	references ringo_member(user_num) on delete cascade
);
--싱글게임 난이도 정보를 기록하는 테이블
create table ringo_single_difficulty (
	user_num			number				NOT NULL,				--싱글게임을 실행하는 유저의 계정 번호, 왜래키이면서 기본키입니다
	file_num			number				not null,						--싱글게임 문제제출에 사용하는 단어장 파일 번호, 왜래키
	difficulty				varchar2(8)		default 'easy' check(difficulty in ('hard', 'normal', 'easy')),	--문제 난이도, 
	word_method	varchar2(10)		default 'random' check(word_method in ('first_in','random')),		--문제 배열 방법, first_in=단어장에 적은 단어 순서대로, random=랜덤 출력
	quest_num		number				default 5,					--한 게임당 문제 갯수
	sichuan_num		number				default 10,					--사천성 게임에서 생성되는 카드 총 수
	word_check		number(1)		default 0 check(word_check in(0, 1)),							--체크한 단어만 문제에 사용할지 여부/0=비체크단어도 사용, 1=체크단어만 사용
	answer_category	varchar2(10) check(answer_category in('sichuan', 'catch', 'siritory', 'twenty')),
	primary key(user_num),
	constraint fk_user_num_sd	foreign key (user_num)	references ringo_member(user_num) on delete cascade,
	constraint fk_file_num_sd 		foreign key (file_num) references ringo_file(file_num) on delete set null
);
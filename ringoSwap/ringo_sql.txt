--회원관련
CREATE TABLE ringo_member (
	user_id 				number	primary key,
	username				varchar2(50)	NOT NULL,
	password				varchar2(255)	NOT NULL,
	nickname				varchar2(50)	NOT NULL,
	first_name				varchar2(50)	NOT NULL,
	last_name				varchar2(50)	NOT NULL,
	gender					char(1)	NOT NULL check(gender in('F', 'M', 'N')),
	birth_date				date	NOT NULL,
	email	 					varchar2(100)	NOT NULL,
	native_language	varchar2(20)	NOT NULL,
	target_language	varchar2(20)	NOT NULL,
	introduction			varchar2(4000),
	hobbies					varchar2(2000),
	rewrite_time			date						default sysdate,
	point						number					default 0,
	cash						number					default 0,
	role_name				varchar2(30)			default 'ROLE_USER' check(role_name in ('ROLE_USER', 'ROLE_DELETE', 'ROLE_VIP', 'ROLE_ADMIN'), --'탈퇴한 유저는 delete_user로 변경
	mbti						varchar2(12) 		check(mbti in('ISFJ', 'ISFP', 'ISTJ', 'ISTP', 'INFJ', 'INFP', 'INTJ', 'INTP', 'ESFJ', 'ESFP', 'ESTJ', 'ESTP', 'ENFJ', 'ENFP', 'ENTJ', 'ENTP')),
	ranking_open		char(1)					default 'y',
	email_open			char(1)					default 'y',
	follow_open			char(1)					default 'y',
	gps_open				char(1)					default 'y',
	trans_lang				varchar2(10)			default 'kor' check(trans_lang in ('kor', 'jap', 'eng'))
);

CREATE TABLE lingo_taglink_member (
	user_id				number,		--멤버 테이블 외래키
	tag_id				number,		--태그저장소 테이블 외래키
	primary key(user_id, tag_id),
	foreign key	(tag_id) references ringo_feed(feed_id) on delete cascade,
	foreign key	(user_id) references ringo_member(user_id) on delete cascade
);

CREATE TABLE ringo_tagstorage_member (
	tag_id		number				primary key,
	tag			varchar2(200)	not null
);

CREATE TABLE ringo_member_profile (
	user_id				number			primary key,				--유저 키, 멤버로부터 받아온 외래키이자 기본키
	original_profile	varchar2(50)	NULL,
	saved_profile		varchar2(50)	NULL,
	foreign key (user_id) references ringo_member(user_id) on delete cascade
);

--공지관련
CREATE TABLE ringo_notification (
	noti_id					number					primary key,		--공지글 번호
	admin_id				number					references ringo_member(user_id) on delete cascade,
	noti_title				varchar2(500)		not null,				--제목
	noti_contents			varchar2(4000)		NOT NULL,		--내용
	noti_views				number					default 0,			--조회수
	noti_inputdate		date					default sysdate,		--작성일
	noti_modifiedate	date					default sysdate		--수정일
);

--피드 관련
CREATE TABLE ringo_feed (
	feed_id			number				primary key,			--피드 글번호
	user_id			number				references ringo_member(user_id) on delete cascade,		--유저 키, 피드 작성자
	contents		varchar2(4000)	NOT NULL,			--내용
	inputdate		date					default sysdate,		--작성일
);

CREATE TABLE ringo_feed_photo (
	feedphoto_id		number			primary key,			--피드 사진 번호
	feed_id				number			references ringo_feed(feed_id) on delete cascade,		--사진이 입력된 글번호를 불러오는 외래키
	origin_file			varchar2(50) not null,					--실제 파일명
	saved_file			varchar2(300) not null				--저장된 경로에서의 파일명
);

CREATE TABLE ringo_feed_like (
	feed_id			number, 
	user_id			number,
	primary key	(feed_id, user_id),
	foreign key	(feed_id) references ringo_feed(feed_id) on delete cascade,
	foreign key	(user_id) references ringo_member(user_id) on delete cascade
);

CREATE TABLE ringo_reply (
	reply_id		number	primary key,
	user_id		number,
	feed_id		number,
	reply_contents	varchar2(4000)	NOT NULL,
	inputdate		date		default sysdate,
	foreign key (feed_id) references ringo_feed(feed_id) on delete cascade,
	foreign key (user_id) references ringo_member(user_id)
);

CREATE TABLE ringo_Reply_like (
	reply_id			number, 
	user_id			number,
	primary key	(reply_id, user_id),
	foreign key	(reply_id) references ringo_reply(reply_id) on delete cascade,
	foreign key	(user_id) references ringo_member(user_id) on delete cascade
);

CREATE TABLE ringo_taglink (
	feed_id		number,
	tag_id		number,
	foreign key (feed_id) references ringo_feed(feed_id) on delete cascade,
	foreign key (feed_id) references ringo_feed(feed_id) on delete cascade,
);

CREATE TABLE ringo_taglink (
	feed_id		number	NOT NULL	DEFAULT 1,
	tag_id		number	NOT NULL	DEFAULT default 0
);

CREATE TABLE `ringo_tag_storage` (
	`tag_id`	number	NOT NULL	DEFAULT default 0,
	`tag_name`	varchar2(50)	NOT NULL
);

--채팅 관련
CREATE TABLE ringo_chatroom (
	chatroom_id			number	primary key,
	user_id					number	references ringo_member(user_id) on delete cascade,
	title						varchar2(1500)	NOT NULL,
	lang_category		varchar2(30)	NOT NULL	check(lang_category in('kor', 'jap', 'eng')),
	gen_category		varchar2(30)	NOT NULL	check(gen_category in('enjoy', 'study', 'live', 'game'))
);

CREATE TABLE ringo_chat (
	chat_id				number	primary key,
	user_id				number,
	chatroom_id		number,
	chatphoto_id		number,
	message			CLOB	NOT NULL	TimeStamp TIMESTAMP
	foreign key	(user_id) references ringo_member(user_id) on delete cascade,
	foreign key	(chatroom_id) references ringo_chatroom(chatroom_id) on delete cascade,
	foreign key	(chatphoto_id) references ringo_chatphoto(chatphoto_id) on delete cascade,
);

CREATE TABLE ringo_voice_permission (
	users_id1		number,
	users_id2		number,
	chatroom_id	number,
	FOREIGN KEY (User_id1) REFERENCES ringo_member(user_id) on delete cascade,
	FOREIGN KEY (User_id2) REFERENCES ringo_member(user_id) on delete cascade
);
CREATE TABLE `chat_link` (
	`chat`	VARCHAR(255)	NOT NULL,
	`user`	VARCHAR(255)	NULL,
	`bangjang`	VARCHAR(255)	NULL
);

CREATE TABLE ringo_dmroom (
	dm_id	number	primary key,
	user_id1	number,	
	user_id2	number,
	FOREIGN KEY (User_id1) REFERENCES ringo_member(user_id) on delete cascade,
	FOREIGN KEY (User_id2) REFERENCES ringo_member(user_id) on delete cascade
);

CREATE TABLE ringo_dm_message (
	message_id		number	primary key,
	dm_id				number,
	sender_id			number,
	chatPhoto_id		number	NOT NULL	DEFAULT 1,
	dm_message	CLOB	NOT NULL	DEFAULT TimeStamp TIMESTAMP,
	FOREIGN KEY (sender_id) REFERENCES ringo_member(user_id) on delete cascade,
	FOREIGN KEY (dm_id) REFERENCES ringo_dmroom(dm_id) on delete cascade
);

CREATE TABLE ringo_chatPhoto (
	chatphoto_id		number	primary key,							-- '메시지가 사진인 경우, 해당 사진의 정보(사진 테이블)를 참조'
	type				varchar2(20)	NOT NULL check(type in ('chat', 'dm')),		--COMMENT 'chat or dm',
	origin_file		varchar2(50),
	saved_file		varchar2(300)
);

--노트관련
CREATE TABLE ringo_directory (
	dir_id				number				primary key,
	user_id				number				references ringo_member(user_id) on delete cascade,
	dir_name			varchar2(50)		NOT NULL,
	path					varchar2(255)	NOT NULL,
	parent_dir_id		number				NOT NULL
);

CREATE TABLE ringo_file (
	file_id			number		primary key,
	dir_id			number		references ringo_directory(dir_id) on delete cascade,
	user_id			number		references ringo_member(user_id) on delete cascade,
	size				number		NOT NULL,
	inputdate		date			default sysdate,
	modifie_date	date			default sysdate,
	file_type		varchar2(20)
);

CREATE TABLE `ringo_Word` (
	`File_id`	number	NOT NULL,
	`directory_id`	number	NOT NULL,
	`users_id`	number	NOT NULL	DEFAULT 1	COMMENT '유저 키',
	`pron`	varchar2(200)	NULL,
	`word`	varchar2(200)	NOT NULL,
	`mean`	varchar2(200)	NOT NULL
);

--라이브 관련
CREATE TABLE ringo_liveroom (
	live_id					number			primary key,	--라이브룸 번호(프라이머리 키로 사용)
	live_host_id			number			references ringo_member(user_id) on delete cascade		--'members의 users_id를 reference',
	live_mark				number			default 0,	--즐겨찾기
	live_title					varchar2(50)	NOT NULL,	--제목
	live_cam				number			default 0 check(live_cam in ('0', '1')),	-- 0 cam off 1 cam on
	live_lang				varchar2(20)	NOT NULL,
	live_viewer_num	number	NOT NULL	DEFAULT default 0
);

CREATE TABLE ringo_liveroom_donation (
	live_donation_id		number		primary key,
	live_id						number,				--후원보낸 방번호
	live_host_id				varchar2(20),		-- '후원받는 사람'
	live_inputdate			date			default sysdate,		--후원보낸 날짜
	live_donation_cash	number		default 1,	--후원 금액, '단위 뭘로 할지?'
	live_guest_id				varchar2(20),			--'후원하는 사람'
	foreign key (live_id) 			references		ringo_liveroom(live_id) on delete null,				--라이브 방이 삭제되면 방번호를 null로 변경(삭제되지 않음)
	foreign key (live_host_id) references		ringo_member(user_id) on delete cascade,		--후원받은 호스트게정이 삭제되면 같이 삭제
	foreign key (live_guest_id) references	ringo_member(user_id) on delete null		--후원자 계정이 삭제되면 이름없음으로 표시
);

CREATE TABLE `ringo_live_chat` (
	`live_chat_id`	number	NOT NULL	DEFAULT 1,
	`liveroom_num`	number	NOT NULL	DEFAULT 1,
	`users_id`	number	NOT NULL	DEFAULT 1	COMMENT '유저 키',
	`message`	varchar2(4000)	NOT NULL	DEFAULT TimeStamp TIMESTAMP
);

CREATE TABLE `ringo_liveroom_viewers_trend` (
	`liveroom_viewers_num_id`	number	NOT NULL,
	`liveroom_num`	number	NOT NULL	COMMENT '라이브방번호',
	`liveroom_host_id`	number	NOT NULL	COMMENT 'members의 users_id를 reference',
	`liveroom_viewers_num`	number	NOT NULL	DEFAULT default 0,
	`inputdate`	default sysdate	NOT NULL	DEFAULT default sysdate
);

--알림 관련
CREATE TABLE ringo_alert (
	alert_type_id`	number	NOT NULL,
	`alert_receiver_id`	number	NOT NULL	COMMENT 'members의 users_id',
	`alert_message_id`	number	NOT NULL,
	`alert_sender_id`	number	NOT NULL	COMMENT 'members의 users_id',
	`alert_checked`	number	NOT NULL	DEFAULT default 0	COMMENT '0 unchecked
1 checked',
	`inputdate`	VARCHAR(255)	NULL
);

CREATE TABLE `ringo_alert_message` (
	`alert_message_id`	number	NOT NULL	DEFAULT default 0,
	`alert_message`	varchar2(4000)	NOT NULL	DEFAULT TimeStamp TIMESTAMP,
	`alert_category`	varchar2(50)	NOT NULL	COMMENT '피드/라이브/팔로워/코멘트/라이크 등'
);

--스토어 관련
CREATE TABLE `ringo_store` (
	`store_item_id`	number	NOT NULL,
	`store_item_price`	number	NOT NULL	DEFAULT default 0,
	`store_item_name`	varchar2(50)	NOT NULL,
	`store_item_image_url`	varchar2(4000)	NULL	DEFAULT TimeStamp TIMESTAMP,
	`store_item_category`	varchar2(20)	NOT NULL,
	`store_payment_method`	number	NOT NULL	DEFAULT default 0
);

CREATE TABLE `ringo_store_purchase` (
	`store_purchase_id`	number	NOT NULL,
	`store_item_id`	number	NOT NULL,
	`users_id`	number	NOT NULL	DEFAULT 1	COMMENT '유저 키',
	`inputdate`	default sysdate	NOT NULL	DEFAULT default sysdate	COMMENT '구매날짜',
	`store_payment_method`	number	NOT NULL	DEFAULT default 0	COMMENT '0 point
1 jam'
);

CREATE TABLE `ringo_store_cart` (
	`users_id`	number	NOT NULL	DEFAULT 1	COMMENT '유저 키',
	`store_item_id`	number	NOT NULL
);

CREATE TABLE ringo_buy_cash (
	cash_id			number			primary key,
	user_id			number			references ringo_member(user_id) on delete cascade,
	purchase_category	varchar2(100)	NOT NULL,
	cash_buy		number			NOT NULL	DEFAULT default 0,
	buytext			varchar2(2000),
	inputdate		date			DEFAULT default sysdate
);

--게임관련
CREATE TABLE ringo_multiroom (
	`gameroom_id`	number	NOT NULL,
	`gamename`	varchar2(255)	NULL,
	`opendate`	default sysdate	NULL,
	`capacity`	number	NOT NULL	DEFAULT 1,
	`category`	varchar2(30)	NOT NULL,
	`host_id`	varchar2(255)	NOT NULL
);

CREATE TABLE `ringo_multigamechat` (
	`gameroom_id`	number	NOT NULL,
	`users_id`	number	NOT NULL	DEFAULT 1	COMMENT '유저 키',
	`message`	varchar2(1000)	NULL,
	`inputdate`	default sysdate	NOT NULL	DEFAULT default sysdate
);



CREATE TABLE `ringo_tempwriting` (
	`File_id`	number	NOT NULL,
	`directory_id`	number	NOT NULL,
	`users_id`	number	NOT NULL	DEFAULT 1	COMMENT '유저 키',
	`text`	varchar2(4000)	NULL
);

CREATE TABLE `ringo_multigamescore` (
	`users_id`	number	NOT NULL	DEFAULT 1	COMMENT '유저 키',
	`playdate`	default sysdate	NOT NULL,
	`score`	number	NULL,
	`category`	varchar2(30)	NOT NULL
);

CREATE TABLE `ringo_multigameresultlink` (
	`users_id`	number	NOT NULL	DEFAULT 1	COMMENT '유저 키',
	`gameroom_id`	number	NOT NULL
);


CREATE TABLE `ringo_ranking` (
	`ranking_id`	number	NOT NULL,
	`users_id`	number	NOT NULL	COMMENT '유저 키',
	`score`	number	NULL	DEFAULT default 0,
	`category`	varchar2(20)	NULL,
	`lastplayedtime`	default sysdate	NOT NULL	DEFAULT default sysdate,
	`maxscore`	number	NULL	DEFAULT default 0
);

CREATE TABLE `ringo_commonchatroom` (
	`chatroom_id`	number	NOT NULL,
	`users_id`	number	NOT NULL	COMMENT '유저 키',
	`languageCategory`	varchar2(10)	NOT NULL	DEFAULT check(languageCategory in('korean', 'japanese', 'english')),
	`generalCategory`	varchar2(30)	NULL,
	`modifiedDate`	default sysdate	NOT NULL	DEFAULT default sysdate,
	`chatcategory`	varchar2(30)	NULL,
	`totalsize`	number	NULL	DEFAULT default 10000000
);

CREATE TABLE `ringo_commonchat` (
	`chat_id`	number	NOT NULL,
	`chatphoto_id`	number	NOT NULL,
	`chatroom_id`	number	NOT NULL,
	`users_id`	number	NOT NULL	COMMENT '유저 키',
	`message`	varchar2(4000)	NULL	DEFAULT TimeStamp TIMESTAMP
);

CREATE TABLE `ringo_commonchatphoto` (
	`chatphoto_id`	number	NOT NULL,
	`origin_file`	varchar2(50)	NULL,
	`saved_file`	varchar2(200)	NULL,
	`size`	number	NULL	DEFAULT default 10000000
);


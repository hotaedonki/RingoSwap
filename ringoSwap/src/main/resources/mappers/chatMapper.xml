<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="net.ringo.ringoSwap.dao.ChatDAO">
	<!-- 오픈 채팅방 만들기 -->
	<insert id="createOpenChatroom" parameterType="Chatroom" >
		insert into ringo_chatroom
			(
				chatroom_num
				, host_num
				, title
				, lang_category
				, capacity
			)
			values
			(
				ringo_chatroom_seq.nextval
				, #{host_num}
				, #{title}
				, #{lang_category}
				, #{capacity}
			)
	</insert>
	
	<!-- DM 채팅방 만들기 -->
	<insert id="createDMChatroom" parameterType="java.util.Map">
		insert into ringo_dm_chatroom
			(
				dm_chatroom_num
				, user_num1
				, user_num2
			)
			values
			(
				ringo_chatroom_seq.nextval
				, #{user_num1}
				, #{user_num2}
			)
	</insert>
	
	<!-- 자신이 참가한 채팅방을 DB에 기록 -->
	<insert id="createChatroomLink" parameterType="ChatroomLink">
		insert into ringo_chatroom_link
			(
				user_num
				, chatroom_num
			)
			values
			(
				#{user_num}
				, #{chatroom_num}
			)
	</insert>
	
	<!-- 메시지를 보낼 경우 DB(ChatCommon 형태)에 기록 -->
	<insert id="insertChatCommon" parameterType="ChatCommon">
		insert into ringo_chat_common
			(
				chat_num
				, user_num
				, chatroom_num
				, message
				, origin_file
				, saved_file
			)
			values
			(
				ringo_chat_common_seq.nextval
				, #{user_num}
				, #{chatroom_num}
				, #{message}
				, #{origin_file}
				, #{saved_file}
			)
	</insert>
	
	<insert id="insertDMChatCommon" parameterType="ChatCommon">
			insert into ringo_chat_common
			(
				chat_num
				, user_num
				, dm_chatroom_num
				, message
				, origin_file
				, saved_file
			)
			values
			(
				ringo_chat_common_seq.nextval
				, #{user_num}
				, #{dm_chatroom_num}
				, #{message}
				, #{origin_file}
				, #{saved_file}
			)
	</insert>
	
	<!-- 메시지들을 DB에서 삭제함 -->
    <delete id="deleteMessage" parameterType="ChatCommon">
    	delete 
    		ringo_chat_common
		
		where
			chat_num in 
			<foreach collection="list" item="chat_num" open="(" separator="," close=")">
				#{chat_num}
			</foreach>
			
			user_num in 
			<foreach collection="list" item="user_num" open="(" separator="," close=")">
				#{user_num}
			</foreach>
			
			chatroom_num in
			<foreach collection="list" item="chatroom_num" open="(" separator="," close=")">
				#{chatroom_num}
			</foreach>
    </delete>

	<!-- 채팅방 링크 가져오기 -->
	<select id="getChatroomNums" parameterType="int" resultType="int">
		select
			chatroom_num
		from
			ringo_chatroom_link
		where
			user_num = #{user_num}
	</select>
	
	<!-- 
		내가 참여한 채팅방 리스트 가져오기
		* 주의 : 가져오려면 ringo_chatroom_link에서 chatroom_num을 ArrayList<int>로 담아오고,
	 			담아온 ArrayList<int>를 parameter에 넣고 getChatrooms에서 ArrayList<Chatroom>으로 가져오기.
	-->
	<select id="getChatrooms" parameterType="int" resultType="Chatroom">
	    select * from 
	    	ringo_chatroom
	    where 
	    	chatroom_num in
	    	<foreach collection="list" item="chatroom_num" open="(" separator="," close=")">
	        	#{chatroom_num}
	    	</foreach>
	  		order by modifie_date desc
	</select>
	
	<!-- 채팅방의 가장 큰 순 -->
	<select id="getMaxChatroomNum">
	    select
	    	max(chatroom_num) as chatroom_num
	    from 
	    	ringo_chatroom
    </select>
    
    <!-- 유저 고유 번호로 채팅방 링크를 가져옴 -->
    <select id="getChatroomLinksByUserNum" parameterType="int" resultType="ChatroomLink">
    	select
    		*
    	from
    		ringo_chatroom_link
    	where
    		user_num = #{user_num}
    </select>
    
    <!-- 방 고유 번호로 채팅방 링크를 가져옴 -->
    <select id="getChatroomLinksByChatroomNum" parameterType="int" resultType="ChatroomLink">
	   	select
	    	*
	    from
	    	ringo_chatroom_link
	    where
	    	chatroom_num = #{chatroom_num} 
    </select>
    
    <!-- 채팅방 정보를 채팅방 링크로 가져온다. -->
	<select id = "loadChatRooms" parameterType="ChatroomLink" resultType="Chatroom">
		select * from
			ringo_chatroom
		where
			chatroom_num in
			<foreach collection="list" item="chatroom_num" open="(" separator="," close=")">
				#{chatroom_num}
			</foreach>
	</select>
	
	<!-- 채팅방 번호를 가져온다. -->
	<select id="getChatroomById" parameterType="int" resultType="Chatroom">
		select * from
			ringo_chatroom
		where
			chatroom_num = #{chatroom_num}
	</select>
	
	<!-- 채팅방 링크를 유저 고유번호로 가져옴. -->
	<select id="getChatroomLinkByUserNum" parameterType="ChatroomLink" resultType="ChatroomLink">
		select
			*
		from
			ringo_chatroom_link
		where
			user_num = #{user_num}
			and
			chatroom_num = #{chatroom_num}
	</select>
	
	<!-- 해당 채팅방에서 메시지들을 가져온다. -->
	<select id="loadMessageByChatroomNum" parameterType="int" resultType="ChatCommon">
		select
			*
		from
			ringo_chat_common
		where
			chatroom_num = #{chatroom_num}
		order by
			INPUTDATE
	</select>
	
	<!-- 오픈 채팅방들 목록을 가져온다 -->
	<select id="getOpenChatrooms" resultType="Chatroom">
		select
			*
		from
			ringo_chatroom
		order by
			modifie_date desc
	</select>
	
	<!-- 챗커먼의 Chat_num 최대 값을 가져온다 -->
	<select id="getMaxChatNum" resultType="int">
		select
			max(chat_num) as chat_num
		from
			ringo_chat_common
	</select>
	
	<!-- Chat_num의 MAX 값으로 챗커먼을 가져옴(가장 최신순) -->
	<select id="getChatCommonLatest" resultType="ChatCommon">
	SELECT *
		FROM (
				SELECT 
					*
				FROM 
					ringo_chat_common
				ORDER BY 
					INPUTDATE DESC
			)
		WHERE ROWNUM = 1
	</select>
	
	<!-- 채팅방 링크들을 이용해 채팅방들을 가져온다. -->
	<select id="getChatroomsByChatroomLinks" parameterType="ChatroomLink" resultType="Chatroom">
	select * from
		ringo_chatroom
	where
		chatroom_num in
		<foreach collection="list" item="chatroom_num" open="(" separator="," close=")">
			#{chatroom_num}
		</foreach>
	</select>
	
	<!-- 채팅방 목록에 표시할 필요한 데이터들만 가져오기 위한 sql문 -->
	<select id="getChatroomThumbnails" parameterType="int" resultType="net.ringo.ringoSwap.domain.custom.ChatroomThumbnail">
		SELECT 
			rc.chatroom_num,
			rc.title,
			rcc.message,
			TO_CHAR(rcc.inputdate, 'YYYY-MM-DD HH24:MI:SS') as inputdate
		FROM
			ringo_chatroom rc
		JOIN 
			ringo_chat_common rcc 
		ON 
			rc.chatroom_num = rcc.chatroom_num
		WHERE
			rc.chatroom_num IN (
				SELECT chatroom_num FROM ringo_chatroom_link WHERE user_num = #{userNum}
			)
		AND rcc.inputdate = (
				SELECT MAX(inputdate) FROM ringo_chat_common WHERE chatroom_num = rc.chatroom_num
			)
		ORDER BY
			rcc.inputdate DESC
	</select>
	
	<select id="getDMChatroomThumbnails" parameterType="int" resultType="net.ringo.ringoSwap.domain.custom.ChatroomThumbnail">
    WITH LatestMessages AS (
        SELECT dm_chatroom_num, message, inputdate
        FROM (
            SELECT dm_chatroom_num, message, inputdate, ROW_NUMBER() OVER(PARTITION BY dm_chatroom_num ORDER BY inputdate DESC) AS rn
            FROM ringo_chat_common
        ) tmp
        WHERE tmp.rn = 1
    )
    SELECT
        d.dm_chatroom_num AS chatroom_num,
        CASE
            WHEN d.user_num1 = #{user_num} THEN m2.nickname
            ELSE m1.nickname
        END AS title,
        COALESCE(l.message, '대화를 시작하세요') AS message,
        COALESCE(TO_CHAR(l.inputdate, 'YYYY-MM-DD HH24:MI:SS'), TO_CHAR(d.modifie_date, 'YYYY-MM-DD HH24:MI:SS')) AS inputdate
    FROM ringo_dm_chatroom d
    LEFT JOIN ringo_member m1 ON d.user_num1 = m1.user_num
    LEFT JOIN ringo_member m2 ON d.user_num2 = m2.user_num
    LEFT JOIN LatestMessages l ON d.dm_chatroom_num = l.dm_chatroom_num
    WHERE d.user_num1 = #{user_num} OR d.user_num2 = #{user_num}
	</select>
	
	<!-- 내가 참여한 채팅방을 제목 기준으로 검색하여 결과를 가져옴 -->
	<select id="getChatroomThumbnailsByTitle" parameterType="java.util.Map" resultType="net.ringo.ringoSwap.domain.custom.ChatroomThumbnail">
		SELECT 
			rc.chatroom_num,
			rc.title,
			rcc.message,
			TO_CHAR(rcc.inputdate, 'YYYY-MM-DD HH24:MI:SS') as inputdate
		FROM
			ringo_chatroom rc
		JOIN 
			ringo_chat_common rcc 
		ON 
			rc.chatroom_num = rcc.chatroom_num
		WHERE
			rc.chatroom_num IN (
				SELECT chatroom_num FROM ringo_chatroom_link WHERE user_num = #{userNum}
			)
		AND
			rc.title LIKE #{title}
		AND rcc.inputdate = (
				SELECT MAX(inputdate) FROM ringo_chat_common WHERE chatroom_num = rc.chatroom_num
			)
		ORDER BY
			rcc.inputdate DESC
	</select>
	
	<!-- 내가 속한 채팅방의 고유 번호들을 내 고유번호로 가져옴 -->
	<select id="loadChatRoomNumsByUserNum" parameterType="int" resultType="int">
		select 
			chatroom_num
		from
			ringo_chatroom_link
		where
			user_num = #{user_num}
	</select>
	
	<!-- 모든 오픈 채팅방 정보를 가져온다 -->
	<select id="getAllOpenchatrooms" resultType="net.ringo.ringoSwap.domain.custom.OpenChatroomInfo">
	    SELECT
	        c.chatroom_num,
	        c.lang_category,
	        c.title,
	        c.capacity,
	        (
	            SELECT COUNT(*)
	            FROM ringo_chatroom_link l
	            WHERE l.chatroom_num = c.chatroom_num
	        ) AS currentHeadCount, <!-- 여기서 currentHeadCount 항목을 계산. -->
	        c.modifie_date,
	        c.host_num,
	        m.nickname
	    FROM 
	        ringo_chatroom c
	    INNER JOIN 
	        ringo_member m ON c.host_num = m.user_num
        WHERE c.capacity != 2
	    ORDER BY 
	        c.modifie_date DESC
	</select>
	
	<!-- 언어 필터 기준으로 채팅방들을 가져온다. -->
	<select id="searchChatroomByLang" parameterType="string" resultType="net.ringo.ringoSwap.domain.custom.OpenChatroomInfo">
		SELECT
	        c.chatroom_num,
	        c.lang_category,
	        c.title,
	        c.capacity,
	        (
	            SELECT COUNT(*)
	            FROM ringo_chatroom_link l
	            WHERE l.chatroom_num = c.chatroom_num
	        ) AS currentHeadCount, <!-- 여기서 currentHeadCount 항목을 계산. -->
	        c.modifie_date,
	        c.host_num,
	        m.nickname
	    FROM 
	        ringo_chatroom c
	    INNER JOIN 
	        ringo_member m ON c.host_num = m.user_num
	    WHERE
            c.lang_category = #{lang_category}
            AND c.capacity != 2
	    ORDER BY 
	        c.modifie_date DESC
	</select>
	
	<!-- DM 채팅방의 고유 번호 중 가장 큰 것을 가져온다. -->
	<select id="getMaxDMChatroomNum" resultType="int">
		select
	    	max(dm_chatroom_num) as dm_chatroom_num
	    from 
	    	ringo_dm_chatroom
	</select>
	
	<!-- DM 채팅방 고유 번호를 이용해 DM 채팅방 정보를 가져온다. -->
	<select id="getDMChatroomByDMChatroomNum" parameterType="int" resultType="DM_Chatroom">
		select
			*
		from
			ringo_dm_chatroom
		where
			dm_chatroom_num = #{dm_chatroom_num}
	</select>
	
	<!-- 유저 고유 번호들을 이용해 채팅방 정보를 가져온다 -->
	<select id="getDMChatroomByUserNums" parameterType="java.util.Map" resultType="DM_Chatroom">
		select
			*
		from
			ringo_dm_chatroom
		where
			(user_num1 = #{user_num1} and user_num2 = #{user_num2})
			or
			(user_num1 = #{user_num2} and user_num2 = #{user_num1})
	</select>
	
	<!-- 내 고유 번호와 채팅방 고유 번호를 이용해 채팅방 정보를 가져온다 -->
    <select id="getDMChatroomByDMChatroomNumAnduserNum" parameterType="java.util.Map" resultType="DM_Chatroom">
		select
			*
		from
			ringo_dm_chatroom
		where
		(
			(user_num1 = #{userNum} or user_num2 = #{userNum})
		)
		and
			dm_chatroom_num = #{dmRoomId}
    </select>
    
    <!-- 고유 번호를 이용하여 내가 속해있는 DM 채팅방 번호들을 가져온다 -->
    <select id="loadDMChatRoomNumsByUserNum" parameterType="int" resultType="int" >
    	select 
			dm_chatroom_num
		from
			ringo_dm_chatroom
		where
			user_num1 = #{userNum} or user_num2 = #{userNum}
    </select>
    
    <delete id="leaveChatroom" parameterType="map">
    	delete from ringo_chatroom_link
        where user_num = #{userNum}
        and chatroom_num = #{chatroomNum}
	</delete>
	
	<select id="getEmptyChatrooms" resultType="int">
	    SELECT chatroom_num 
	    FROM ringo_chatroom 
	    WHERE chatroom_num NOT IN (SELECT DISTINCT chatroom_num FROM ringo_chatroom_link)
	</select>
	
	<delete id="deleteChatroom">
	    delete from ringo_chatroom
	    where chatroom_num = #{chatroomNum}
	</delete>
    <!-- 내가 참여한 DM 채팅방 중에서 상대방의 닉네임을 검색할 시 일치한 DM 채팅방들을 가져온다 -->
    <select id="getChatroomThumbnailsByNickname" parameterType="java.util.Map" resultType="net.ringo.ringoSwap.domain.custom.ChatroomThumbnail">
	    WITH LatestMessage AS (
	        SELECT 
	            chatroom_num,
	            MAX(inputdate) AS latest_date
	        FROM 
	            ringo_chat_common
	        GROUP BY 
	            chatroom_num
	    )
	    SELECT 
	        dm.dm_chatroom_num AS chatroom_num,
	        m.nickname AS title,
	        COALESCE(TO_CHAR(cc.inputdate, 'YYYY-MM-DD HH24:MI:SS'), TO_CHAR(dm.modifie_date, 'YYYY-MM-DD HH24:MI:SS')) AS inputdate,
	        COALESCE(cc.message, '대화를 시작하세요') AS message
	    FROM 
	        ringo_dm_chatroom dm
	    JOIN 
	        ringo_member m ON (m.user_num = dm.user_num1 OR m.user_num = dm.user_num2) AND m.user_num != #{userNum}
	    LEFT JOIN 
	        LatestMessage lm ON dm.dm_chatroom_num = lm.chatroom_num
	    LEFT JOIN 
	        ringo_chat_common cc ON lm.chatroom_num = cc.chatroom_num AND lm.latest_date = cc.inputdate
	    WHERE 
	        (dm.user_num1 = #{userNum} OR dm.user_num2 = #{userNum})
	        AND m.nickname LIKE #{nickname}
    </select>

	
	<!-- 현재 존재하는 모든 채팅방 갯수를 리턴하는 select문 -->
	<select id="chatRoomSelectTotal">
		select count(*)
		from ringo_chatroom
		where capacity != 2
	</select>
	
	<insert id="insertOtherPerson" parameterType="Map">
		insert into ringo_chatroom_link (chatroom_num, user_num)
		values (#{chatroomNum}, #{otherUserNum})
	</insert>
	<select id="getChatroomOpacity" resultType="int">
        SELECT chatroom_num
        FROM ringo_chatroom
        WHERE capacity = 2
        	and user_num = #{user_num}
    </select>
	
</mapper>


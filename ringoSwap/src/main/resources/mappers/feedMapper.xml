
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="net.ringo.ringoSwap.dao.FeedDAO">
	<!-- 피드 출력 기능 시작 -->
	<!-- 모든 게시물을 최신순으로 리턴하는 select문 -->
	<select id="feedSelectAll" parameterType="java.util.HashMap" resultType="Feed">
		select * from
		ringo_feed_with_likeandtag
		<where>
			<if test="text != 'null'">
			user_id like '%'||#{text}||'%'
				and contents like '%'||#{text}||'%'
				and tag_list like '%'||#{text}||'%'
			</if>
			<if test="feedArrayType == 'popular' and text != 'null'">
				and
			</if>
			<if test="feedArrayType == 'popular' ">
				where (sysdate - inputdate) &lt;= 14
			</if>
		</where>
		<if test="feedArrayType == 'default' ">
		order by inputdate desc
		</if>
		<if test="feedArrayType == 'popular' ">
		order by like_count DESC
		</if>
	</select>

	<!-- feed_num을 매개변수로 특정 feed 게시글 정보를 리턴하는 select문 -->
	<select id="feedSelectOneByFeedNum" resultType="Feed">
		select * from
		ringo_feed_with_likeandtag
		where feed_num = #{feed_num}
	</select>

	<!-- feed_num을 매개변수로 특정 피드에 달린 reply 배열 정보를 리턴하는 select문 -->
	<select id="replySelectByFeedNum" resultType="Reply">
	    select 
	        R.*,
	        (select count(*) from ringo_reply where parent_reply_num = R.reply_num) as reply_count
	    from ringo_reply_with_likeandtag R
	    where feed_num = #{feed_num}
	    order by inputdate desc
	</select>

	<!-- feed_num을 매개변수로 해당 피드에 등록된 사진 정보 배열 객체를 불러오는 메서드 -->
	<select id="feedPhotoSelectByFeedNum" resultType="FeedPhoto">
		select * from
		ringo_feed_photo
		where feed_num = #{feed_num}
		order by photo_num
	</select>
	<!-- 피드 출력 기능 끝 -->

	<!-- 피드 삽입 기능 시작 -->
	<!-- 작성한 feed 객체를 DB에 매개변수로 전달하는 메서드 -->
	<insert id="feedInsert" parameterType="Feed"
		useGeneratedKeys="true" keyProperty="feed_num" keyColumn="feed_num">
		insert into
		ringo_feed (feed_num, user_num, contents)
		values
		(ringo_feed_seq.nextval, #{user_num}, #{contents})
	</insert>
	<!-- 작성한 feedPhoto 배열을 DB에 매개변수로 전달하는 메서드 -->
	<insert id="feedPhotoInsert" parameterType="FeedPhoto">
	    INSERT INTO ringo_feed_photo(
        photo_num, feed_num, origin_file, 
        saved_file, description, photo_size, 
        photo_format
    ) 
    VALUES (
        ringo_feed_photo_seq.nextval, #{feed_num}, 
        #{origin_file}, #{saved_file}, NULL, 
        #{photo_size}, #{photo_format}
    )
	</insert>

	<!-- 작성한 Reply 객체를 DB에 매개변수로 전달하는 insert문 -->
	<insert id="replyInsert" parameterType="Reply">
		insert into
		ringo_reply(reply_num, feed_num, user_num, contents, parent_reply_num)
		values
		(ringo_reply_seq.nextval, #{feed_num}, #{user_num}, #{contents}, #{parent_reply_num})
	</insert>

	<!-- 피드 작성 기능 끝 -->

	<!-- 피드&댓글 좋아요 기능 시작 -->
	<!-- 사용자가 해당 피드에 좋아요를 줬는지 여부를 확인해 리턴하는 select문 -->
	<select id="feedLikeSelectOneForCheck"
		parameterType="java.util.HashMap">
		select count(*)
		from ringo_feed_like
		where user_num =
		#{user_num} and
		feed_num = #{feed_num}
	</select>
	<!-- 해당 피드에 사용자의 좋아요를 삽입하는 insert문 -->
	<insert id="feedLikeInsertOne" parameterType="java.util.HashMap">
		insert into
		ringo_feed_like (user_num, feed_num)
		values (#{user_num}, #{feed_num})
	</insert>
	<!-- 해당 피드에서 사용자의 좋아요를 삭제하는 delete문 -->
	<delete id="feedLikeDeleteOne" parameterType="java.util.HashMap">
		delete
		ringo_feed_like
		where user_num = #{user_num} and
		feed_num = #{feed_num}
	</delete>
	<!-- 특정 피드의 현재 좋아요 갯수를 리턴하는 select문 -->
	<select id="feedLikeCountSelectByFeedNum">
		select count(*)
		from ringo_feed_like
		where feed_num =
		#{feed_num}
	</select>

	<!-- 사용자가 해당 댓글에 좋아요를 줬는지 여부를 확인해 리턴하는 select문 -->
	<select id="replyLikeSelectOneForCheck"
		parameterType="java.util.HashMap">
		select count(*)
		from ringo_reply_like
		where user_num =
		#{user_num} and
		reply_num = #{reply_num}
	</select>
	<!-- 해당 댓글에 사용자의 좋아요를 삽입하는 insert문 -->
	<insert id="replyLikeInsertOne"
		parameterType="java.util.HashMap">
		insert into ringo_reply_like (user_num, reply_num)
		values (#{user_num}, #{reply_num})
	</insert>
	<!-- 해당 댓글에서 사용자의 좋아요를 삭제하는 delete문 -->
	<delete id="replyLikeDeleteOne"
		parameterType="java.util.HashMap">
		delete ringo_reply_like
		where user_num = #{user_num} and
		reply_num = #{reply_num}
	</delete>
	<!-- 특정 댓글의 현재 좋아요 갯수를 리턴하는 select문 -->
	<select id="replyLikeCountSelectByFeedNum">
		select count(*)
		from ringo_reply_like
		where reply_num =
		#{reply_num}
	</select>
	<!-- 피드&댓글 좋아요 기능 끝 -->

	<!-- 태그 관련 기능 시작 -->

	<!-- 태그 검색시 해당 태그가 달린 피드, 그리고 해당 태그가 달린 댓글이 달린 피드를 검색범위로 하고, 주어진 정렬방식 feedArrayType에 
		따라 검색한 feed배열을 정렬하는 select문 -->
	<select id="feedArraySearchByTagName"
		parameterType="java.util.HashMap" resultType="Feed">
		select feed_num, user_id, original_profile
		, saved_profile, contents,
		inputdate
		, like_count, tag_list
		from ringo_feed_with_likeandtag F
		where
		tag_list like '%' || #{tag_name} || '%'
		or feed_num in (
		select distinct
		feed_num
		from ringo_reply_with_likeandtag R
		where tag_list like '%' ||
		#{tag_name} || '%'
		)
		<choose>
			<when test="feedArrayType == 'default' ">
				order by inputdate desc
			</when>
			<when test="feedArrayType == 'popular' ">
				order bylike_count desc
			</when>
			<otherwise>
			</otherwise>
		</choose>
	</select>
	<!-- 태그 관련 기능 끝 -->

	<!-- 삭제 관련 기능 시작 -->
	<!-- feed_num과 user_num을 기반으로 피드의 작성자가 맞는지 확인하면서 작성자가 맞다면 해당 피드를 삭제하는 delete문 -->
	<delete id="feedDeleteByUser" parameterType="java.util.HashMap">
		delete ringo_feed
		where feed_num = #{feed_num}
			and user_num =#{user_num}
	</delete>
	<!-- reply_num과 user_num을 기반으로 댓글의 작성자가 맞는지 확인후, 작성자가 맞다면 해당 댓글을 삭제하는 delete문 -->
	<delete id="replyDeleteOne" parameterType="java.util.HashMap">
	delete ringo_reply
	where reply_num = #{reply_num}
		and user_num = #{user_num}
	</delete>
	<!-- 삭제 관련 기능 끝 -->
	<!-- Mention 기능 시작 -->
	<insert id="saveMention" parameterType="java.util.Map">
	    INSERT INTO ringo_reply_mentions (
	        mentioned_num,
	        mentioned_username,
	        reply_num,
	        mentioned_user_num
	    )
	    VALUES (
	        RINGO_REPLY_MENTIONS_SEQ.NEXTVAL,
	        #{mentioned_username},
	        #{reply_num},
	        #{mentioned_user_num}
	    )
	</insert>

</mapper>

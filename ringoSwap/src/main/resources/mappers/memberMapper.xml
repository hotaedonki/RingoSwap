<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="net.ringo.ringoSwap.dao.MemberDAO">
	<!-- 회원정보를 memberDB로 전송하여 회원정보를 insert하는 코드 -->
	<insert id="insertMember" parameterType="Member" useGeneratedKeys="true"  keyProperty="user_num" keyColumn="user_num">
		insert into ringo_member
			(user_num, user_id, password, nickname
			, first_name, last_name, gender, birth_date
			, email, native_lang, target_lang
			<if test="introduction != null">
			, introduction
			</if>)
		values
			(ringo_member_seq.nextval, #{user_id}, #{password}
			, #{nickname}, #{first_name}, #{last_name}, #{gender}
			, #{birth_date}, #{email}, #{native_lang}, #{target_lang}
			<!-- 자기소개 값을 입력하지 않은 경우 빈칸으로 대체 --> 
            <if test="introduction != null">, #{introduction}</if>
            )
          <selectKey resultType="int" keyProperty="user_num" order="AFTER">
          select ringo_member_seq.currval from dual
          </selectKey>
	</insert>
	
	<!-- 회원가입시 입력한 id에 중복이 존재하는지 확인하는 select문 -->
	<select id="idCheck" parameterType="Member">
	select count(*)
	from ringo_member
	where user_id = #{user_id}
	</select>
	
	<select id="emailCheck" parameterType="String" resultType="int">
		select count(*)
		from ringo_member
		where email = #{email}
	</select>
	
	<select id="nicknameCheck" parameterType="String" resultType="int">
		select count(*)
		from ringo_member
		where nickname = #{nickname}
	</select>
	
	<select id="userIDByEmail" parameterType="String" resultType="String">
		select user_id
		from ringo_member
		where email = #{email}
	</select>
	
	<select id="printMyProfilePhoto" parameterType="String" resultType="String">
		select saved_profile 
		from ringo_member
		where user_id = #{user_id}
	</select>
	
	<select id="emailConfirmForPassword" parameterType="hashmap" resultType="Member">
	select *
		from ringo_member
	where
		user_id = #{user_id}
		and
		email = #{email}
	</select>
	
	<update id="resetPassword" parameterType="Member">
	update ringo_member
	set 
		password = #{password}
	where 
		user_id = #{user_id}
	</update>
	
	<select id="getEncodedPasswordByUserNum" parameterType="int" resultType="String">
		select password
		from ringo_member 
		where user_num = #{user_num}
	</select>
	<!-- [ 회원가입&로그인 기능 종료 ] -->

	<!-- [ 멤버태그 관련 기능 시작 ] -->
	<!-- 태그명을 매개변수로 태그번호를 검색해 리턴하는 select문 -->
	<select id="memberTagSearchByTagNameReturnTagNum" parameterType="String">
	select tag_num
	from ringo_tagstorage_member
	where tag in
		<foreach collection="array" item="tag" open="(" separator=", " close=")">
			#{tag}
		</foreach>
	</select>
	<!-- 사용자가 설정한 멤버태그 객체가 이미 존재하는지 확인하는 select문 -->
	<select id="memberTagLinkSearch" parameterType="java.util.HashMap">
	select count(*)
	from ringo_taglink_member
	where user_num = #{user_num}
		and tag_num = #{tag_num}
	</select>
	<!-- 사용자가 설정한 멤버태그를 member_taglink에 삽입하는 insert문 -->
	<insert id="memberTagLinkInsert" parameterType="java.util.HashMap">
	insert into ringo_taglink_member(user_num, tag_num)
	values (#{user_num}, #{tag_num})
	</insert>
	<!-- 사용자의 user_num을 이용하여 현재 taglink가 걸린 tag_num을 배열로 전부 리턴받는 select문 -->
	<select id="memberTagLinkSearchAllByUserNum" resultType="Integer">
	select tag_num
	from ringo_taglink_member
	where user_num = #{user_num}
	</select>
	<!-- 특정 taglink 객체를 DB의 taglink_member 테이블에서 삭제하는 delete문 -->
	<delete id="memberTagLinkDelete" parameterType="java.util.HashMap">
	delete from ringo_taglink_member
	where user_num = #{user_num}
		and tag_num IN
		<foreach collection="tag_num" item="item" open="(" separator=", " close=")">
			#{item}
		</foreach>
	</delete>
	<!-- 특정 사용자의 회원번호를 매개변수로 검색하여 해당 회원의 회원태그 목록을 출력하는 select문 -->
	<select id="memberTagSelectByUserNum" resultType="String">
	select t.tag 
	from ringo_member M, ringo_taglink_member TL, ringo_tagstorage_member T
	where M.user_num = TL.user_num 
		and tl.tag_num = t.tag_num 
		and M.user_num = #{user_num}
	</select>
	<!-- [ 멤버태그 관련 기능 종료 ] -->

	<!-- [ 마이페이지 시작 ] -->
	<!-- 매개변수로 받은 id값으로 검색한 정보를 member 객체로 리턴하는 select문 -->
	<select id="memberSearchById" parameterType="String" resultType="Member">
	select *
	from ringo_member_with_mypage
	where user_id = #{user_id}
	</select>
	<!-- 사용자의 수정한 프로필 정보 매개변수로 가져가 DB를 수정하는 update문 -->
	<update id="memberUpdateProfile" parameterType="Member">
	update ringo_member
	set target_lang=#{target_lang}, introduction=#{introduction}
        , rewrite_time=sysdate
        , original_profile=#{original_profile}
        , saved_profile=#{saved_profile}
        , original_background=#{original_background}
        , saved_background=#{saved_background}
	where user_num = #{user_num}
	</update>
	<!-- 사용자의 수정한 계정 정보 매개변수로 가져가 DB를 수정하는 update문 -->
	<update id="memberUpdateAccount" parameterType="Member">
	update ringo_member
	set user_id=#{user_id}, password=#{password}, nickname=#{nickname}
		, first_name=#{first_name}, last_name=#{last_name}, gender=#{gender}
		, birth_date=#{birth_date}, ranking_open=#{ranking_open}, email_open=#{email_open}
		, follow_open=#{follow_open}, gps_open=#{gps_open}, trans_lang=#{trans_lang}
	where user_num = #{user_num}
	</update>
	
	<select id="memberSearchByNum" parameterType="int" resultType="Member">
		select *
		from ringo_member
		where user_num = #{user_num}
	</select>
	<!--  -->
	<update id="memberUpdatePersonalInfo" parameterType="java.util.HashMap">
	update ringo_member
	set gender = #{gender}
		<if test="nickname != '' "> , nickname = #{nickname}</if>
		<if test="password != '' "> , password = #{password}</if>
		, target_lang = #{target_lang}
		, trans_lang = #{trans_lang}
		<if test="reveal_follow == 'public' ">
			, follow_open = 'Y'
		</if>
		<if test="reveal_follow == 'private' ">
			, follow_open = 'N'
		</if>
	where user_id = #{user_id}
	</update>
	<!-- 마이페이지 종료 -->
	<!-- 팔로우/팔로워 기능 시작 -->
	<!-- 특정 문자열이 포함된 닉네임을 가진 모든 회원의 회원번호를 리턴하는 select문 -->
	<select id="memberByNicknameReturnUserNum" parameterType="String">
	select user_num
	from ringo_member
	where nickname like '%'||#{nickname}||'%'
	</select>
	
	<select id="followerArraySearch" parameterType="java.util.HashMap">
	select *
	from ringo_follower_view
	where followee_num = #{followee_num}
		and follower_num in
		<foreach collection="follower_num" item="follower" open="(" separator=", " close=")">
			#{follower}
		</foreach>
	</select>
	
	<select id="followeeArraySearch" parameterType="java.util.HashMap">
	select *
	from ringo_followee_view
	where follower_num = #{follower_num}
		and followee_num in
		<foreach collection="followee_num" item="followee" open="(" separator=", " close=")">
			#{followee}
		</foreach>
	</select>
	
	<!-- 사용자가 특정 회원의 user_num을 매개변수로 해당 회원을 팔로우하는 insert문 -->
	<insert id="followInsert" parameterType="java.util.HashMap">
	insert into ringo_member_follow(follower_num, followee_num)
	values (#{follower_num}, #{followee_num})
	</insert>
	<!-- 사용자가 특정 회원의 user_num을 매개변수로 해당 회원을 언팔로우하는 delete문 -->
	<delete id="followDelete" parameterType="java.util.HashMap">
	delete ringo_member_follow
	where follower_num = #{follower_num} and followee_num = #{followee_num}
	</delete>
	<!-- 특정 회원이 다른 회원을 팔로우 했는지 확인하는 select문 -->
	<select id="followSearch" parameterType="java.util.HashMap">
	select count(*)
	from ringo_member_follow
	where follower_num = #{follower_num}
		and followee_num = #{followee_num}
	</select>
	<!-- 특정 회원이 다른 회원과 친구상태인지 확인하는 select문 -->
	<select id="followSearchReturnFriendCheck" parameterType="java.util.HashMap">
	select friend_check
	from ringo_member_follow
	where follower_num = #{follower_num}
		and followee_num = #{followee_num}
	</select>
	<!-- 친구 상태임을 업데이트하는 update문 -->
	<update id="followFriendUpdate" parameterType="java.util.HashMap">
		update ringo_member_follow
		set friend_check = 1
		where follower_num = #{follower_num} 
			and followee_num = #{followee_num} 
	</update>
	<!-- 친구 상태가 아님을 업데이트하는 update문 -->
	<update id="followFriendRelease" parameterType="java.util.HashMap">
		update ringo_member_follow
		set friend_check = 0
		where follower_num = #{follower_num} 
			and followee_num = #{followee_num} 
	</update>
	<!-- 회원번호를 매개변수로 해당 회원과 친구관계인 회원목록을 리턴하는 select문 -->
	<select id="friendSelectByUserNum" resultType="MemberFollow">
	select * 
	from ringo_followee_view
	where friend_check = 1 and follower_num = #{user_num}
	</select>
	<!-- 팔로우/팔로워 기능 종료 -->
	
	<select id="getUserIdByNickname" parameterType="String" resultType="int">
		select user_num
		from ringo_member
		where nickname like '%'|| #{nickname} ||'%'
	</select>
	
	<select id="nicknameByUserId" parameterType="String" resultType="String">
		select nickname
		from ringo_member
		where user_id = #{user_id}
	</select>
	
	<select id="getNicknameByUserNum" parameterType="int" resultType="String">
		select nickname
		from ringo_member
		where user_num = #{user_num}
	</select>
	
	<select id="memberSearchByUsername" parameterType="String" resultType="Member">
		select *
		from ringo_member_with_mypage
		where nickname = #{nickname}
	</select>
	
	<select id="getAllUserDetailsByChatroomNum" parameterType="int" resultType="map">
	    SELECT DISTINCT m.nickname, c.user_num, m.user_id, m.trans_lang
	    FROM ringo_chatroom_link c
	    JOIN ringo_member m ON c.user_num = m.user_num
	    WHERE c.chatroom_num = #{chatroomNum}
	</select>
	
	<select id="getAllUserNumsAndNicknamesByChatroomNum" parameterType="int" resultType="map">
	    SELECT DISTINCT m.nickname, c.user_num, m.user_id, m.trans_lang, TO_CHAR(c.inputdate, 'YYYY-MM-DD HH24:MI:SS') AS formatted_inputdate
	    FROM ringo_chat_common c
	    JOIN ringo_member m ON c.user_num = m.user_num
	    WHERE c.chatroom_num = #{chatroomNum}
	</select>
	
	<select id="getDMUserDetailsByDMChatroomNum" parameterType="int" resultType="map">
	    SELECT DISTINCT m.nickname, dm.user_num1, dm.user_num2, m.user_id, m.trans_lang
	    FROM ringo_dm_chatroom dm
	    JOIN ringo_member m ON dm.user_num1 = m.user_num OR dm.user_num2 = m.user_num
	    WHERE dm.dm_chatroom_num = #{dm_chatroom_num}
	</select>
	
	<select id="getDMUserMessagesByDMChatroomNum" parameterType="int" resultType="map">
	    SELECT DISTINCT m.nickname, c.user_num, m.user_id, m.trans_lang, TO_CHAR(c.inputdate, 'YYYY-MM-DD HH24:MI:SS') AS formatted_inputdate
	    FROM ringo_chat_common c
	    JOIN ringo_member m ON c.user_num = m.user_num
	    WHERE c.dm_chatroom_num = #{dm_chatroom_num}
	</select>

	<insert id="memberGameSettingInsert">
	 insert  into ringo_game_setting(user_num) 
	 values(#{user_num})
	</insert>
	<insert id="directoryDefaultCreate">
		insert into ringo_directory (dir_num, user_num, dir_name)
		values(ringo_directory_seq.nextval, #{user_num}, 'DefaultFolder')
	</insert>
	
</mapper>
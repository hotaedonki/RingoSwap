<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="net.ringo.ringoSwap.dao.MemberDAO">
	<!-- 회원정보를 memberDB로 전송하여 회원정보를 insert하는 코드 -->
	<insert id="insertMember" parameterType="Member">
		insert into ringo_member
			(user_num
			, user_id
			, password
			, username
			, first_name
			, last_name
			, gender
			, birth_date
			, email
			, native_lang
			, target_lang
			, introduction)
		values
			(ringo_member_seq.nextval
			, #{user_id}
			, #{password}
			, #{username}
			, #{first_name}
			, #{last_name}
			, #{gender}
			, #{birth_date}
			, #{email}
			, #{native_lang}
			, #{target_lang}
			,
			<!-- 자기소개 값을 입력하지 않은 경우 빈칸으로 대체 --> 
			<choose>
            <when test="introduction == null">''</when>
            <otherwise>#{introduction}</otherwise>
          </choose>)
	</insert>
	
	<!-- 회원가입시 입력한 id에 중복이 존재하는지 확인하는 select문 -->
	<select id="idCheck" parameterType="Member">
	select count(*)
	from ringo_member
	where user_id = #{user_id}
	</select>
	
	<select id="emailConfirmForPassword" parameterType="hashmap" resultType="Member">
	select *
		from ringo_member
	where
		user_id = #{user_id}
		and
		email = #{email}
	</select>
	
	<update id="resetPassword" parameterType="Member">
	update ringo_member
	set 
		password = #{password}
	where 
		user_id = #{user_id}
	</update>
	<!-- [ 회원가입&로그인 기능 종료 ] -->

	<!-- [ 멤버태그 관련 기능 시작 ] -->
	<!-- 태그명을 매개변수로 태그번호를 검색해 리턴하는 select문 -->
	<select id="memberTagSearchByTagNameReturnTagNum" parameterType="String">
	select tag_num
	from ringo_tagstorage_member
	where tag in
		<foreach collection="array" item="tag" open="(" separator=", " close=")">
			#{tag}
		</foreach>
	</select>
	<!-- 사용자가 설정한 멤버태그 객체가 이미 존재하는지 확인하는 select문 -->
	<select id="memberTagLinkSearch" parameterType="java.util.HashMap">
	select count(*)
	from ringo_taglink_member
	where user_num = #{user_num}
		and tag_num = #{tag_num}
	</select>
	<!-- 사용자가 설정한 멤버태그를 member_taglink에 삽입하는 insert문 -->
	<insert id="memberTagLinkInsert" parameterType="java.util.HashMap">
	insert into ringo_taglink_member(user_num, tag_num)
	values (#{user_num}, #{tag_num})
	</insert>
	<!-- 사용자의 user_num을 이용하여 현재 taglink가 걸린 tag_num을 배열로 전부 리턴받는 select문 -->
	<select id="memberTagLinkSearchAllByUserNum" resultType="Integer">
	select tag_num
	from ringo_taglink_member
	where user_num = #{user_num}
	</select>
	<!-- 특정 taglink 객체를 DB의 taglink_member 테이블에서 삭제하는 delete문 -->
	<delete id="memberTagLinkDelete" parameterType="java.util.HashMap">
	delete from ringo_taglink_member
	where user_num = #{user_num}
		and tag_num IN
		<foreach collection="list" item="tag_num" open="(" separator=", " close=")">
			#{tag_num}
		</foreach>
	</delete>
	<!-- [ 멤버태그 관련 기능 종료 ] -->

	<!-- [ 마이페이지 시작 ] -->
	<!-- 매개변수로 받은 id값으로 검색한 정보를 member 객체로 리턴하는 select문 -->
	<select id="memberSearchById" parameterType="String" resultType="Member">
	select *
	from ringo_member_with_mypage
	where user_id = #{user_id}
	</select>
	
	<!-- 사용자의 수정한 프로필 정보 매개변수로 가져가 DB를 수정하는 update문 -->
	<update id="memberUpdateProfile" parameterType="Member">
	update ringo_member
	set target_lang=#{target_lang}, introduction=#{introduction}
        , rewrite_time=sysdate
        <if test="original_profile == null">
        , original_profile=#{original_profile}
        </if>
        <if test="saved_profile == null">
        , saved_profile=#{saved_profile}
        </if>
	where user_num = #{user_num}
	</update>
	<!-- 사용자의 수정한 계정 정보 매개변수로 가져가 DB를 수정하는 update문 -->
	<update id="memberUpdateAccount" parameterType="Member">
	update ringo_member
	set user_id=#{user_id}, password=#{password}, username=#{username}
		, first_name=#{first_name}, last_name=#{last_name}, gender=#{gender}
		, birth_date=#{birth_date}, ranking_open=#{ranking_open}, email_open=#{email_open}
		, follow_open=#{follow_open}, gps_open=#{gps_open}, trans_lang=#{trans_lang}
	where user_num = #{user_num}
	</update>
	
</mapper>
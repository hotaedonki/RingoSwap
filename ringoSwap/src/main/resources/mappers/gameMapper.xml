<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="net.ringo.ringoSwap.dao.GameDAO">
	<!-- 
		user_num을 매개변수로 file_type이 word인 파일목록을 리턴하는 select문
		note기능과 연동되는 기능입니다.
	 -->
	 <select id="wordFileSelectByUserNum" resultType="DIrFile">
	 select * 
	 from ringo_file
	 where user_num = #{user_num}
	 	and file_type = 'word'
	 </select>
	 <!-- user_num과 file_num을 매개변수로 DB에서 특정 사용자의 file_num값을 수정하는 update문 -->
	 <update id="fileWordUpdate" parameterType="java.util.HashMap">
	 update ringo_game_setting
	 set 
	 <if test="select == all">
	 	file_num = 0
	 </if>
	 <if test="select != all">
	 	file_num = #{file_num}
	 </if>
	 where user_num = #{user_num}
	 </update>
	 <!-- user_num을 매개변수로 특정 사용자의 게임세팅 정보를 리턴하는 select문 -->
	 <select id="gameSettingSelectByUserNum" resultType="GameSetting">
	 select *
	 from ringo_game_setting
	 where user_num = #{user_num}
	 </select>
	 <!-- 사용자가 수정한 게임세팅 정보를 매개변수로  DB의 정보를 수정하는 update문 -->
	 <update id="gameSettingUpdate" parameterType="GameSetting">
	 update ringo_game_setting
	 set form_type=#{form_type}, pron_show=#{pron_show}
	 	, order_type=#{order_type}, description_show=#{description_show}
	 where user_num = #{user_num}
	 </update>
	 <!-- 사용자가 수정한 정보를 매개변수로 DB의 문제 갯수 속성을 수정하는 update문 -->
	 <update id="gameSettingUpdateQuestionNum" parameterType="java.util.HashMap">
	 update ringo_game_setting
	 set question_num = #{question_num}
	 where user_num = #{user_num}
	 </update>
	 <!-- DB 내부 게임설정의 match_use값을 변경하는 update문 -->
	 <update id="matchUseUpdate" parameterType="java.util.HashMap">
	 update ringo_game_setting
	 set match_use = #{match_use}
	 where user_num = #{user_num}
	 </update>
	 
	<!-- 게임세팅 정보값을 매개변수로 해당 세팅에 따라 정렬된 단어목록을 리턴하는 select문 -->
	<select id="wordArraySearchByGameSetting" parameterType="GameSetting" resultType="DirWord">
	<if test="question_num != 0">
		select * from(
	</if>
		select *
		from ringo_word
		where 
		<if test="file_num != 0">
			file_num = #{file_num}
		</if>
		<if test="file_num == 0">
			user_num = #{user_num}
		</if>
		<if test="match_use == true">
			and pron is not null
		</if>
		order by 
		<choose>
			<when test="order_type == 'first_one' ">
				inputdate asc
			</when>
			<when test="order_type == 'latest' ">
				inputdate desc
			</when>
			<when test="order_type == 'atoz' ">
				word asc
			</when>
			<when test="order_type == 'ztoa' ">
				word desc
			</when>
			<otherwise>
				DBMS_RANDOM.VALUE
			</otherwise>
		</choose>
	<if test="question_num != 0">
		) where rownum &lt;= #{question_num}
	</if>
	</select>
	
	<select id="wordWrongArraySearchByUserNum"  parameterType="GameSetting" resultType="DirWord">
	<if test="question_num != 0">
		select * from(
	</if>
		select * 
		from ringo_word_wrong
		where user_num = #{user_num}
		<if test="match_use == true">
			and pron is not null
		</if>
		order by 
		<choose>
			<when test="order_type == 'first_one' ">
				inputdate asc
			</when>
			<when test="order_type == 'latest' ">
				inputdate desc
			</when>
			<when test="order_type == 'atoz' ">
				word asc
			</when>
			<when test="order_type == 'ztoa' ">
				word desc
			</when>
			<otherwise>
				DBMS_RANDOM.VALUE
			</otherwise>
		</choose>
	<if test="question_num != 0">
		) where rownum &lt;= #{question_num}
	</if>
	</select>
	<!-- 오답노트에 해당 오답이 존재하는지 확인하는 select문 -->
	<select id="wordWrongSearch">
	select count(*)
	from ringo_word_wrong
	where word_num = #{word_num}
	</select>
	<!-- 오답을 오답노트에 입력하는 insert문 -->
	<insert id="wordWrongArrayInsert" parameterType="DirWord">
	insert into ringo_word_wrong(word_num, user_num, word, pron, mean, description)
	values (#{word_num}, #{user_num}, #{word}, #{pron}, #{mean}, #{description})
	</insert>
	<!-- 정답을 맞춘 오답목록을 오답노트에서 삭제하는 delete문 -->
	<delete id="wordWrongArrayDelete" parameterType="list">
	delete from ringo_word_wrong
	where word_num in
	<foreach item="item" index="index" collection="list" open="(" separator=", " close=")">
		#{item.word_num}
	</foreach>
	</delete>
	
	<!-- 게임로그 기능 시작 -->
	<!-- 사용자의 user_num을 매개변수로 해당 사용자의 게임로그 목록을 출력하는 select문 -->
	<select id="gameLogSearchByUserNum" resultType="GameLog">
	select * from ringo_game_log
	where user_num = #{user_num}
	</select>
	<!-- 입력받은 게임로그 정보를 DB에 입력하는 insert문 -->
	<insert id="gameLogInsert" parameterType="GameLog">
	insert into ringo_game_log(gamelog_num, user_num, file_num, file_title, game_category, lang_category, score, point)
	values (ringo_game_log_seq.nextval, #{user_num}, #{file_num}, #{file_title}, #{game_category}, #{lang_category}, #{score}, #{point})
	</insert>
	
	<!-- 획득한 포인트를 사용자의 포인트에 추가하는 update문 -->
	<update id="memberUpdatePoint" parameterType="java.util.HashMap">
	update ringo_member
	set point = point + #{point}
	where user_num = #{user_num}
	</update>
</mapper>